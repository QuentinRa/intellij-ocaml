/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.ocaml.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.or.lang.OCamlTypes;

import static com.intellij.psi.TokenType.*;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>OCaml.flex</tt>
 */
class OCamlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_STRING = 4;
  public static final int IN_OCAML_ML_COMMENT = 6;
  public static final int IN_OCAML_DOC_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\61\1\62\1\2\22\0\1\3\1\102\1\36\1\72\1\111\1\114\1\104\1\6"+
    "\1\67\1\71\1\70\1\27\1\105\1\76\1\24\1\101\1\14\1\23\2\37\4\13\2\7\1\73\1"+
    "\103\1\77\1\74\1\75\1\110\1\65\1\12\1\22\2\12\1\26\1\12\7\5\1\57\1\20\1\31"+
    "\2\5\1\60\4\5\1\16\2\5\1\64\1\32\1\66\1\113\1\10\1\63\1\40\1\21\1\45\1\41"+
    "\1\25\1\11\1\43\1\51\1\44\1\55\1\4\1\46\1\54\1\33\1\17\1\30\1\4\1\35\1\42"+
    "\1\34\1\50\1\56\1\47\1\15\1\53\1\52\1\106\1\100\1\107\1\112\6\0\1\61\242\0"+
    "\2\61\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\1\7\2\4\1\11\1\4\1\12\4\4"+
    "\1\13\12\4\2\5\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\2\1\46"+
    "\1\47\3\46\1\0\1\50\1\0\1\7\1\51\1\0"+
    "\3\4\2\7\1\0\1\52\2\4\1\53\1\4\1\54"+
    "\3\4\1\55\4\4\1\56\6\4\1\57\1\60\3\4"+
    "\1\61\1\62\20\4\2\5\1\63\1\0\1\64\1\65"+
    "\1\66\1\67\2\0\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\0\1\46\1\0\3\46\1\115\1\116\1\117\1\120"+
    "\1\50\2\120\3\0\2\51\1\0\1\121\1\4\1\122"+
    "\3\7\4\4\1\123\2\4\1\124\1\4\1\125\1\126"+
    "\1\4\1\127\1\130\1\4\1\131\2\4\1\132\1\133"+
    "\1\4\1\134\1\135\1\136\4\4\1\137\7\4\1\140"+
    "\1\141\2\4\1\142\1\143\4\4\1\144\3\4\1\145"+
    "\1\4\2\5\1\146\1\147\3\0\1\150\1\151\1\152"+
    "\6\0\1\4\1\51\1\7\1\4\1\153\5\4\1\154"+
    "\2\4\1\155\1\156\1\157\2\4\1\160\10\4\1\161"+
    "\1\162\1\163\1\164\1\165\1\4\1\166\5\4\1\167"+
    "\1\170\1\171\1\172\4\0\1\4\1\51\2\4\1\173"+
    "\2\4\1\174\2\4\1\175\10\4\1\176\1\177\2\4"+
    "\1\200\2\4\1\0\1\201\1\202\2\4\1\203\1\204"+
    "\3\4\1\205\1\206\1\207\1\210\1\211\4\4\1\212"+
    "\1\213\2\4\1\214\1\215\3\4\1\216\1\4\1\217"+
    "\1\220\1\4\1\221\1\222\1\223\1\224\3\4\1\225"+
    "\3\4\1\226\1\227";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u0181\0\u01ce"+
    "\0\u021b\0\u0268\0\u02b5\0\u0302\0\u021b\0\u034f\0\u039c\0\u03e9"+
    "\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651"+
    "\0\u0181\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c"+
    "\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4"+
    "\0\u0181\0\u0b21\0\u0b6e\0\u0181\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2"+
    "\0\u0cef\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0181"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0f0a\0\u0f57\0\u0181\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8"+
    "\0\u1125\0\u0181\0\u1172\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3"+
    "\0\u1340\0\u138d\0\u021b\0\u13da\0\u1427\0\u021b\0\u1474\0\u14c1"+
    "\0\u150e\0\u155b\0\u15a8\0\u0181\0\u15f5\0\u1642\0\u168f\0\u16dc"+
    "\0\u021b\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7"+
    "\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u021b\0\u1a78\0\u1ac5\0\u1b12"+
    "\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a"+
    "\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2"+
    "\0\u202f\0\u207c\0\u0181\0\u20c9\0\u2116\0\u0181\0\u2163\0\u21b0"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u21fd\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u0181\0\u0181\0\u224a\0\u0181\0\u0181\0\u0f0a\0\u2297\0\u22e4"+
    "\0\u2331\0\u237e\0\u23cb\0\u0181\0\u0181\0\u0181\0\u0181\0\u2418"+
    "\0\u2418\0\u108b\0\u2465\0\u24b2\0\u24ff\0\u0181\0\u254c\0\u2599"+
    "\0\u021b\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4"+
    "\0\u2801\0\u284e\0\u0181\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf"+
    "\0\u021b\0\u2a1c\0\u021b\0\u021b\0\u2a69\0\u021b\0\u2ab6\0\u2b03"+
    "\0\u021b\0\u021b\0\u2b50\0\u021b\0\u021b\0\u021b\0\u2b9d\0\u2bea"+
    "\0\u2c37\0\u2c84\0\u021b\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05"+
    "\0\u2e52\0\u2e9f\0\u021b\0\u021b\0\u2eec\0\u2f39\0\u021b\0\u021b"+
    "\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u3107\0\u3154\0\u31a1"+
    "\0\u021b\0\u31ee\0\u323b\0\u3288\0\u207c\0\u0181\0\u32d5\0\u3322"+
    "\0\u336f\0\u0181\0\u0181\0\u0181\0\u33bc\0\u3409\0\u3456\0\u34a3"+
    "\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u11bf\0\u3624\0\u021b\0\u3671"+
    "\0\u36be\0\u370b\0\u3758\0\u37a5\0\u021b\0\u37f2\0\u383f\0\u021b"+
    "\0\u021b\0\u021b\0\u388c\0\u38d9\0\u021b\0\u3926\0\u3973\0\u39c0"+
    "\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41\0\u021b\0\u021b\0\u021b"+
    "\0\u021b\0\u021b\0\u3b8e\0\u021b\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2"+
    "\0\u3d0f\0\u0268\0\u0268\0\u0181\0\u3d5c\0\u3da9\0\u3df6\0\u3e43"+
    "\0\u3e90\0\u3edd\0\u11bf\0\u3f2a\0\u3f77\0\u021b\0\u3fc4\0\u4011"+
    "\0\u021b\0\u405e\0\u40ab\0\u021b\0\u40f8\0\u4145\0\u4192\0\u41df"+
    "\0\u422c\0\u4279\0\u42c6\0\u4313\0\u021b\0\u021b\0\u4360\0\u43ad"+
    "\0\u021b\0\u43fa\0\u4447\0\u4494\0\u0181\0\u0181\0\u44e1\0\u452e"+
    "\0\u021b\0\u021b\0\u457b\0\u45c8\0\u4615\0\u021b\0\u021b\0\u021b"+
    "\0\u021b\0\u021b\0\u4662\0\u46af\0\u46fc\0\u4749\0\u021b\0\u021b"+
    "\0\u4796\0\u47e3\0\u0181\0\u021b\0\u4830\0\u487d\0\u48ca\0\u021b"+
    "\0\u4917\0\u021b\0\u021b\0\u4964\0\u021b\0\u021b\0\u021b\0\u021b"+
    "\0\u49b1\0\u49fe\0\u4a4b\0\u021b\0\u4a98\0\u4ae5\0\u4b32\0\u021b"+
    "\0\u021b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\115\6\1\7\3\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\12\1\14\1\17\1\11\1\12\1\20\1\12"+
    "\1\21\1\12\1\14\1\22\1\23\1\12\1\24\1\25"+
    "\1\12\1\7\1\26\1\27\1\30\1\31\1\14\1\32"+
    "\1\33\1\34\1\11\1\35\1\36\1\37\1\40\1\41"+
    "\3\11\1\42\1\11\1\43\1\44\1\45\1\7\1\10"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\2\100\1\101\27\100\1\102\3\100\1\103"+
    "\22\100\2\7\34\100\1\101\56\100\2\7\4\100\1\104"+
    "\1\105\26\100\1\101\56\100\2\7\4\100\1\104\1\106"+
    "\24\100\116\0\3\10\56\0\1\10\36\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\22\11\40\0"+
    "\20\12\1\0\2\12\1\0\2\12\1\0\3\12\1\0"+
    "\22\12\34\0\1\107\2\0\1\107\1\110\3\107\2\110"+
    "\3\107\1\110\1\107\1\110\1\107\1\110\3\107\1\110"+
    "\2\107\1\110\1\107\1\111\3\110\2\107\17\110\2\107"+
    "\2\0\32\107\4\0\2\112\1\0\2\14\2\0\2\14"+
    "\4\112\2\0\1\14\1\113\2\114\1\0\2\112\1\0"+
    "\3\112\1\0\1\14\2\0\3\112\1\0\13\112\40\0"+
    "\13\11\1\115\4\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\1\11\1\116\7\11\1\117\10\11\40\0"+
    "\2\112\1\0\2\14\2\0\2\14\2\120\2\121\2\122"+
    "\1\14\1\113\2\114\1\0\2\112\1\0\3\112\1\0"+
    "\1\14\2\0\3\112\1\0\13\112\40\0\5\11\1\123"+
    "\7\11\1\124\2\11\1\0\2\11\1\0\1\125\1\11"+
    "\1\0\2\11\1\126\1\0\22\11\40\0\20\11\1\0"+
    "\1\127\1\11\1\0\2\11\1\0\3\11\1\0\22\11"+
    "\60\0\1\130\74\0\11\11\1\131\6\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\132\2\11\1\0\7\11\1\133"+
    "\12\11\60\0\1\134\74\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\2\11\1\135\1\0\11\11\1\136\10\11"+
    "\40\0\13\11\1\137\4\11\1\0\1\140\1\11\1\0"+
    "\2\11\1\0\3\11\1\0\22\11\40\0\13\11\1\141"+
    "\4\11\1\0\2\11\1\0\2\11\1\0\2\11\1\142"+
    "\1\0\12\11\1\143\1\11\1\144\5\11\40\0\20\11"+
    "\1\0\1\145\1\11\1\0\2\11\1\0\3\11\1\0"+
    "\1\11\1\146\20\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\147\2\11\1\0\3\11\1\150\16\11"+
    "\40\0\13\11\1\151\4\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\22\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\11\1\152\1\11\1\0\5\11"+
    "\1\153\2\11\1\154\11\11\40\0\5\11\1\155\12\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\156\2\11\1\0"+
    "\22\11\40\0\13\11\1\157\4\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\7\11\1\160\12\11\40\0"+
    "\11\11\1\161\1\11\1\162\4\11\1\0\1\163\1\11"+
    "\1\0\2\11\1\0\3\11\1\0\1\11\1\164\1\11"+
    "\1\165\16\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\5\11\1\166\4\11\1\167\7\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\1\170"+
    "\2\11\1\0\22\11\40\0\13\11\1\171\4\11\1\0"+
    "\1\172\1\11\1\0\2\11\1\0\3\11\1\0\1\11"+
    "\1\173\7\11\1\174\10\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\1\11\1\175\3\11"+
    "\1\176\14\11\40\0\13\12\1\177\4\12\1\0\2\12"+
    "\1\0\2\12\1\0\3\12\1\0\22\12\40\0\13\12"+
    "\1\200\4\12\1\0\2\12\1\0\2\12\1\0\3\12"+
    "\1\0\22\12\40\0\2\201\2\0\3\201\2\0\6\201"+
    "\2\0\2\201\1\0\2\201\1\0\3\201\2\0\21\201"+
    "\121\0\1\202\12\0\1\203\101\0\1\204\117\0\1\205"+
    "\50\0\1\206\115\0\1\207\16\0\1\210\25\0\1\211"+
    "\115\0\1\212\1\213\1\214\113\0\1\215\1\216\113\0"+
    "\1\217\44\0\1\220\50\0\1\221\113\0\1\222\1\223"+
    "\1\224\2\0\1\225\101\0\1\226\6\0\1\227\2\0"+
    "\1\230\40\0\1\231\50\0\1\232\113\0\1\233\123\0"+
    "\1\234\115\0\1\235\11\0\1\100\1\236\112\0\1\100"+
    "\1\237\1\240\4\100\1\241\3\100\2\241\1\242\1\100"+
    "\1\243\3\100\1\241\13\100\1\241\21\100\2\0\32\100"+
    "\70\0\1\244\115\0\1\245\114\0\1\246\31\0\1\247"+
    "\112\0\2\250\1\251\15\250\1\0\2\250\1\0\2\250"+
    "\1\0\3\250\1\0\22\250\42\0\1\252\1\253\3\0"+
    "\2\253\1\254\1\0\1\255\1\0\1\107\1\0\1\253"+
    "\6\0\5\107\1\253\61\0\2\256\1\0\2\113\2\0"+
    "\2\113\4\256\2\0\1\113\1\0\2\114\1\0\2\256"+
    "\1\0\3\256\1\0\1\113\2\0\3\256\1\0\13\256"+
    "\43\0\1\257\3\0\2\257\6\0\1\257\3\0\1\260"+
    "\7\0\1\257\36\0\1\260\22\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\2\11\1\261\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\7\11\1\262\12\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\263\2\11\1\0\22\11\43\0\1\264"+
    "\1\0\4\264\4\0\3\264\1\0\2\264\10\0\3\264"+
    "\3\0\1\264\62\0\2\265\6\0\1\265\13\0\1\265"+
    "\71\0\1\266\6\0\1\266\75\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\16\11\1\267\3\11"+
    "\40\0\20\11\1\0\1\270\1\11\1\0\2\11\1\0"+
    "\1\11\1\271\1\11\1\0\22\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\4\11\1\272"+
    "\15\11\60\0\1\273\74\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\274\1\11\1\0\6\11\1\275"+
    "\13\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\276\17\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\3\11\1\277"+
    "\16\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\5\11\1\300\14\11\40\0\15\11\1\301"+
    "\2\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\1\302\1\303\1\11\1\0\22\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\10\11\1\304"+
    "\11\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\11\11\1\305\2\11\1\306\5\11\40\0"+
    "\20\11\1\0\1\307\1\11\1\0\2\11\1\0\3\11"+
    "\1\0\22\11\40\0\20\11\1\0\2\11\1\0\1\310"+
    "\1\11\1\0\3\11\1\0\22\11\40\0\5\11\1\311"+
    "\12\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\6\11\1\312\13\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\5\11\1\313\2\11\1\314"+
    "\11\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\315\17\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\1\316\1\0\3\11"+
    "\1\317\16\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\1\320\2\11\1\0\10\11\1\321\11\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\2\11\1\322"+
    "\1\0\22\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\4\11\1\323\15\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\5\11"+
    "\1\324\14\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\5\11\1\325\1\326\3\11\1\327"+
    "\7\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\1\330\2\11\1\0\22\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\1\11\1\331\20\11"+
    "\40\0\13\11\1\332\4\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\22\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\2\11\1\333\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\1\11\1\334"+
    "\1\11\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\335\2\11\1\0\13\11\1\336\6\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\2\11"+
    "\1\337\1\0\7\11\1\340\12\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\11\1\341\1\11\1\0"+
    "\22\11\40\0\20\11\1\0\1\342\1\11\1\0\2\11"+
    "\1\0\3\11\1\0\5\11\1\343\14\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\5\11"+
    "\1\344\14\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\2\11\1\345\17\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\11\1\346\1\11"+
    "\1\0\22\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\1\11\1\347\1\11\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\11\1\350\1\11"+
    "\1\0\22\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\7\11\1\351\12\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\2\11\1\352\1\0"+
    "\22\11\40\0\20\12\1\0\2\12\1\0\2\12\1\0"+
    "\1\353\2\12\1\0\22\12\40\0\20\12\1\0\2\12"+
    "\1\0\2\12\1\0\3\12\1\0\15\12\1\354\4\12"+
    "\40\0\20\201\1\0\2\201\1\0\2\201\1\0\3\201"+
    "\1\0\22\201\34\0\1\202\2\0\56\202\2\0\3\202"+
    "\1\355\26\202\65\0\1\356\117\0\1\357\57\0\1\360"+
    "\12\0\1\361\57\0\1\362\177\0\1\363\114\0\1\364"+
    "\23\0\1\237\112\0\1\237\1\240\121\0\1\365\3\0"+
    "\2\365\6\0\1\365\13\0\1\365\64\0\1\366\1\0"+
    "\4\366\4\0\3\366\1\0\2\366\10\0\3\366\3\0"+
    "\1\366\63\0\1\367\6\0\1\367\13\0\1\367\61\0"+
    "\20\250\1\0\2\250\1\0\2\250\1\0\3\250\1\0"+
    "\22\250\43\0\1\370\3\0\2\370\6\0\1\370\13\0"+
    "\1\370\64\0\1\371\1\0\4\371\4\0\3\371\1\0"+
    "\2\371\10\0\3\371\3\0\1\371\63\0\1\372\6\0"+
    "\1\372\13\0\1\372\61\0\2\256\1\0\2\257\2\0"+
    "\2\257\4\256\2\0\1\257\4\0\2\256\1\0\3\256"+
    "\1\0\1\257\2\0\3\256\1\0\13\256\43\0\1\257"+
    "\3\0\2\257\6\0\1\257\13\0\1\257\61\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\3\11"+
    "\1\305\16\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\6\11\1\373\13\11\40\0\2\112"+
    "\1\0\6\264\4\112\3\264\1\374\2\264\1\0\2\375"+
    "\1\0\3\112\1\0\3\264\3\112\1\264\13\112\40\0"+
    "\2\112\2\0\1\265\2\0\2\265\4\112\2\0\1\265"+
    "\4\0\2\112\1\0\3\112\1\0\1\265\2\0\3\112"+
    "\1\0\13\112\40\0\2\112\2\0\1\266\3\0\1\266"+
    "\4\112\2\0\1\266\4\0\2\112\1\0\3\112\4\0"+
    "\3\112\1\0\13\112\40\0\20\11\1\0\1\376\1\11"+
    "\1\0\2\11\1\0\3\11\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\377\2\11\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\5\11\1\u0100\14\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\5\11\1\u0101"+
    "\14\11\40\0\20\11\1\0\1\u0102\1\11\1\0\2\11"+
    "\1\0\3\11\1\0\22\11\40\0\20\11\1\0\1\u0103"+
    "\1\11\1\0\2\11\1\0\3\11\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\5\11\1\u0104\14\11\40\0\20\11\1\0\1\u0105\1\11"+
    "\1\0\2\11\1\0\3\11\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\17\11"+
    "\1\u0106\2\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\2\11\1\u0107\1\0\22\11\40\0\20\11\1\0"+
    "\1\u0108\1\11\1\0\2\11\1\0\3\11\1\0\22\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\1\u0109"+
    "\2\11\1\0\22\11\40\0\20\11\1\0\1\u010a\1\11"+
    "\1\0\2\11\1\0\3\11\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\3\11"+
    "\1\u010b\16\11\40\0\20\11\1\0\1\u010c\1\11\1\0"+
    "\2\11\1\0\3\11\1\0\22\11\40\0\20\11\1\0"+
    "\1\u010d\1\11\1\0\2\11\1\0\3\11\1\0\22\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\1\u010e"+
    "\2\11\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\11\11\1\u010f\10\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\1\11\1\u0110"+
    "\1\11\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\u0111\1\11\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\7\11\1\u0112\12\11\40\0\20\11\1\0\1\u0113\1\11"+
    "\1\0\2\11\1\0\3\11\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\3\11"+
    "\1\u0114\16\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\3\11\1\u0115\16\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\2\11\1\u0116\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\2\11\1\u0117\17\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\14\11\1\u0118"+
    "\5\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\12\11\1\u0119\7\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\u011a\2\11\1\0\22\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\7\11\1\u011b\12\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\11\1\u011c\1\11\1\0\22\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\11\11\1\u011d\10\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\12\11\1\u011e\7\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\6\11\1\u011f\13\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\1\11\1\u0120\20\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\1\11"+
    "\1\u0121\1\11\1\0\22\11\40\0\20\12\1\0\1\u0122"+
    "\1\12\1\0\2\12\1\0\3\12\1\0\22\12\40\0"+
    "\20\12\1\0\1\u0123\1\12\1\0\2\12\1\0\3\12"+
    "\1\0\22\12\34\0\70\u0124\2\0\23\u0124\41\0\1\u0125"+
    "\115\0\1\u0126\1\0\1\u0127\57\0\1\100\3\0\2\100"+
    "\6\0\1\100\13\0\1\100\64\0\1\100\1\0\4\100"+
    "\4\0\3\100\1\0\2\100\10\0\3\100\3\0\1\100"+
    "\62\0\2\u0128\6\0\1\u0128\13\0\1\u0128\64\0\1\107"+
    "\3\0\2\107\6\0\1\107\13\0\1\107\64\0\1\107"+
    "\1\0\4\107\4\0\3\107\1\0\2\107\10\0\3\107"+
    "\3\0\1\107\62\0\2\u0129\6\0\1\u0129\13\0\1\u0129"+
    "\61\0\20\11\1\0\2\11\1\0\2\11\1\0\1\11"+
    "\1\u012a\1\11\1\0\22\11\40\0\2\256\1\0\6\374"+
    "\4\256\3\374\1\0\2\374\1\0\2\u012b\1\0\3\256"+
    "\1\0\3\374\3\256\1\374\13\256\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\6\11\1\u012c"+
    "\13\11\40\0\13\11\1\u012d\4\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\22\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\u012e\2\11\1\0\22\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\2\11"+
    "\1\u012f\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\1\u0130\1\11\1\0\3\11\1\0\22\11\40\0\5\11"+
    "\1\u0131\12\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\22\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\1\11\1\u0132\20\11\40\0\20\11"+
    "\1\0\1\u0133\1\11\1\0\2\11\1\0\3\11\1\0"+
    "\22\11\40\0\20\11\1\0\1\u0134\1\11\1\0\2\11"+
    "\1\0\3\11\1\0\22\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\2\11\1\u0135\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\1\11\1\u0136"+
    "\1\11\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\6\11\1\u0137\13\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\6\11\1\u0138\13\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\5\11\1\u0139\14\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\11\11\1\u013a\10\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\2\11\1\u013b\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\11\1\u013c\1\11"+
    "\1\0\22\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\3\11\1\u013d\16\11\40\0\20\11"+
    "\1\0\1\u013e\1\11\1\0\2\11\1\0\3\11\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\7\11\1\u013f\12\11\40\0\13\11\1\u0140"+
    "\4\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\12\11\1\u0141\7\11\40\0\15\11\1\u0142"+
    "\2\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\11\11\1\u0143\10\11\100\0\1\u0144\75\0"+
    "\1\u0145\100\0\1\u0146\116\0\2\100\6\0\1\100\13\0"+
    "\1\100\70\0\2\107\6\0\1\107\13\0\1\107\61\0"+
    "\13\11\1\u0147\4\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\5\11\1\u0148\14\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\11\1\u0149\1\11\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\1\u014a\2\11\1\0\22\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\u014b\2\11\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\1\11\1\u014c"+
    "\1\11\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\u014d\1\11\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\6\11\1\u014e\13\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\u014f\1\11\1\0\22\11\40\0"+
    "\13\11\1\u0150\4\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\u0151\1\11\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\12\11\1\u0152\7\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\1\11\1\u0153\20\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\2\11\1\u0154\17\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\3\11\1\0\5\11\1\u0155\14\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\2\11\1\u0156"+
    "\1\0\22\11\40\0\20\11\1\0\1\u0157\1\11\1\0"+
    "\2\11\1\0\3\11\1\0\22\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\2\11\1\u0158"+
    "\17\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\7\11\1\u0159\12\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\1\11\1\u015a"+
    "\20\11\45\0\1\u015b\107\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\2\11\1\u015c\1\0\22\11\40\0\13\11"+
    "\1\u015d\4\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\22\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\1\11\1\u015e\20\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\5\11"+
    "\1\u015f\14\11\40\0\20\11\1\0\1\u0160\1\11\1\0"+
    "\2\11\1\0\3\11\1\0\22\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\7\11\1\u0161"+
    "\12\11\40\0\20\11\1\0\1\u0162\1\11\1\0\2\11"+
    "\1\0\3\11\1\0\22\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\11\1\u0163\1\11\1\0\22\11"+
    "\40\0\20\11\1\0\2\11\1\0\2\11\1\0\3\11"+
    "\1\0\1\11\1\u0164\20\11\40\0\20\11\1\0\1\u0165"+
    "\1\11\1\0\2\11\1\0\3\11\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\3\11\1\0"+
    "\7\11\1\u0166\12\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\u0167\2\11\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\7\11"+
    "\1\u0168\12\11\40\0\13\11\1\u0169\4\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\22\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\3\11\1\0\5\11"+
    "\1\u016a\14\11\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\5\11\1\u016b\14\11\40\0\20\11"+
    "\1\0\2\11\1\0\2\11\1\0\1\u016c\2\11\1\0"+
    "\22\11\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\13\11\1\u016d\6\11\40\0\20\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\u016e\2\11\1\0\22\11"+
    "\40\0\20\11\1\0\1\u016f\1\11\1\0\2\11\1\0"+
    "\3\11\1\0\22\11\40\0\20\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\u0170\1\11\1\0\22\11\40\0"+
    "\20\11\1\0\2\11\1\0\2\11\1\0\2\11\1\u0171"+
    "\1\0\22\11\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19327];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\21\1\1\11\17\1\1\11\2\1\1\11"+
    "\13\1\11\11\2\1\1\11\3\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\0\5\1\1\0\11\1\1\11\45\1"+
    "\1\0\1\11\2\1\1\11\2\0\4\11\1\1\15\11"+
    "\1\1\2\11\1\0\1\1\1\0\3\1\4\11\3\1"+
    "\3\0\1\11\1\1\1\0\12\1\1\11\62\1\1\11"+
    "\3\0\3\11\6\0\51\1\1\11\1\1\4\0\32\1"+
    "\1\0\2\11\24\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private OCamlTypes types;
    private int tokenStartIndex;
    private CharSequence quotedStringId;
    private int commentDepth;
    private boolean inComment = false;

    //Store the start index of a token
    private void tokenStart() {
        tokenStartIndex = zzStartRead;
    }

    //Set the start index of the token to the stored index
    private void tokenEnd() {
        zzStartRead = tokenStartIndex;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OCamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return OCamlTypes.STRING_VALUE;
            }  // fall though
            case 370: break;
            case IN_OCAML_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return OCamlTypes.MULTI_COMMENT;
            }  // fall though
            case 371: break;
            case IN_OCAML_DOC_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return OCamlTypes.DOC_COMMENT;
            }  // fall though
            case 372: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            } 
            // fall through
          case 152: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 153: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 154: break;
          case 4: 
            { return OCamlTypes.LIDENT;
            } 
            // fall through
          case 155: break;
          case 5: 
            { return OCamlTypes.UIDENT;
            } 
            // fall through
          case 156: break;
          case 6: 
            { return OCamlTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 157: break;
          case 7: 
            { return OCamlTypes.INT_VALUE;
            } 
            // fall through
          case 158: break;
          case 8: 
            { return OCamlTypes.UNDERSCORE;
            } 
            // fall through
          case 159: break;
          case 9: 
            { return OCamlTypes.DOT;
            } 
            // fall through
          case 160: break;
          case 10: 
            { return OCamlTypes.PLUS;
            } 
            // fall through
          case 161: break;
          case 11: 
            { if (!inComment) yybegin(IN_STRING); tokenStart();
            } 
            // fall through
          case 162: break;
          case 12: 
            { return OCamlTypes.BACKTICK;
            } 
            // fall through
          case 163: break;
          case 13: 
            { return OCamlTypes.LBRACKET;
            } 
            // fall through
          case 164: break;
          case 14: 
            { return OCamlTypes.AT_SIGN;
            } 
            // fall through
          case 165: break;
          case 15: 
            { return OCamlTypes.RBRACKET;
            } 
            // fall through
          case 166: break;
          case 16: 
            { return OCamlTypes.LPAREN;
            } 
            // fall through
          case 167: break;
          case 17: 
            { return OCamlTypes.STAR;
            } 
            // fall through
          case 168: break;
          case 18: 
            { return OCamlTypes.RPAREN;
            } 
            // fall through
          case 169: break;
          case 19: 
            { return OCamlTypes.SHARP;
            } 
            // fall through
          case 170: break;
          case 20: 
            { return OCamlTypes.COLON;
            } 
            // fall through
          case 171: break;
          case 21: 
            { return OCamlTypes.EQ;
            } 
            // fall through
          case 172: break;
          case 22: 
            { return OCamlTypes.GT;
            } 
            // fall through
          case 173: break;
          case 23: 
            { return OCamlTypes.MINUS;
            } 
            // fall through
          case 174: break;
          case 24: 
            { return OCamlTypes.LT;
            } 
            // fall through
          case 175: break;
          case 25: 
            { return OCamlTypes.PIPE;
            } 
            // fall through
          case 176: break;
          case 26: 
            { return OCamlTypes.SLASH;
            } 
            // fall through
          case 177: break;
          case 27: 
            { return OCamlTypes.EXCLAMATION_MARK;
            } 
            // fall through
          case 178: break;
          case 28: 
            { return OCamlTypes.SEMI;
            } 
            // fall through
          case 179: break;
          case 29: 
            { return OCamlTypes.AMPERSAND;
            } 
            // fall through
          case 180: break;
          case 30: 
            { return OCamlTypes.COMMA;
            } 
            // fall through
          case 181: break;
          case 31: 
            { return OCamlTypes.LBRACE;
            } 
            // fall through
          case 182: break;
          case 32: 
            { return OCamlTypes.RBRACE;
            } 
            // fall through
          case 183: break;
          case 33: 
            { return OCamlTypes.QUESTION_MARK;
            } 
            // fall through
          case 184: break;
          case 34: 
            { return OCamlTypes.DOLLAR;
            } 
            // fall through
          case 185: break;
          case 35: 
            { return OCamlTypes.TILDE;
            } 
            // fall through
          case 186: break;
          case 36: 
            { return OCamlTypes.CARET;
            } 
            // fall through
          case 187: break;
          case 37: 
            { return OCamlTypes.PERCENT;
            } 
            // fall through
          case 188: break;
          case 38: 
            { 
            } 
            // fall through
          case 189: break;
          case 39: 
            { yybegin(INITIAL); tokenEnd(); return OCamlTypes.STRING_VALUE;
            } 
            // fall through
          case 190: break;
          case 40: 
            { return OCamlTypes.TYPE_ARGUMENT;
            } 
            // fall through
          case 191: break;
          case 41: 
            { return OCamlTypes.FLOAT_VALUE;
            } 
            // fall through
          case 192: break;
          case 42: 
            { return OCamlTypes.OF;
            } 
            // fall through
          case 193: break;
          case 43: 
            { return OCamlTypes.OR;
            } 
            // fall through
          case 194: break;
          case 44: 
            { return OCamlTypes.DOTDOT;
            } 
            // fall through
          case 195: break;
          case 45: 
            { return OCamlTypes.PLUSDOT;
            } 
            // fall through
          case 196: break;
          case 46: 
            { return OCamlTypes.TO;
            } 
            // fall through
          case 197: break;
          case 47: 
            { return OCamlTypes.AS;
            } 
            // fall through
          case 198: break;
          case 48: 
            { return OCamlTypes.DO;
            } 
            // fall through
          case 199: break;
          case 49: 
            { return OCamlTypes.IF;
            } 
            // fall through
          case 200: break;
          case 50: 
            { return OCamlTypes.IN;
            } 
            // fall through
          case 201: break;
          case 51: 
            { return OCamlTypes.POLY_VARIANT;
            } 
            // fall through
          case 202: break;
          case 52: 
            { return OCamlTypes.LARRAY;
            } 
            // fall through
          case 203: break;
          case 53: 
            { return OCamlTypes.AT_SIGN_2;
            } 
            // fall through
          case 204: break;
          case 54: 
            { yybegin(IN_OCAML_ML_COMMENT); commentDepth = 1; inComment = true; tokenStart();
            } 
            // fall through
          case 205: break;
          case 55: 
            { return OCamlTypes.STARDOT;
            } 
            // fall through
          case 206: break;
          case 56: 
            { return OCamlTypes.SHARPSHARP;
            } 
            // fall through
          case 207: break;
          case 57: 
            { return OCamlTypes.SHORTCUT;
            } 
            // fall through
          case 208: break;
          case 58: 
            { return OCamlTypes.COLON_EQ;
            } 
            // fall through
          case 209: break;
          case 59: 
            { return OCamlTypes.COLON_GT;
            } 
            // fall through
          case 210: break;
          case 60: 
            { return OCamlTypes.EQEQ;
            } 
            // fall through
          case 211: break;
          case 61: 
            { return OCamlTypes.ARROW;
            } 
            // fall through
          case 212: break;
          case 62: 
            { return OCamlTypes.GT_OR_EQUAL;
            } 
            // fall through
          case 213: break;
          case 63: 
            { return OCamlTypes.MINUSDOT;
            } 
            // fall through
          case 214: break;
          case 64: 
            { return OCamlTypes.RIGHT_ARROW;
            } 
            // fall through
          case 215: break;
          case 65: 
            { return OCamlTypes.LT_OR_EQUAL;
            } 
            // fall through
          case 216: break;
          case 66: 
            { return OCamlTypes.OP_STRUCT_DIFF;
            } 
            // fall through
          case 217: break;
          case 67: 
            { return OCamlTypes.LEFT_ARROW;
            } 
            // fall through
          case 218: break;
          case 68: 
            { return OCamlTypes.TAG_LT_SLASH;
            } 
            // fall through
          case 219: break;
          case 69: 
            { return OCamlTypes.RARRAY;
            } 
            // fall through
          case 220: break;
          case 70: 
            { return OCamlTypes.PIPE_FORWARD;
            } 
            // fall through
          case 221: break;
          case 71: 
            { return OCamlTypes.L_OR;
            } 
            // fall through
          case 222: break;
          case 72: 
            { return OCamlTypes.SLASHDOT;
            } 
            // fall through
          case 223: break;
          case 73: 
            { return OCamlTypes.TAG_AUTO_CLOSE;
            } 
            // fall through
          case 224: break;
          case 74: 
            { return OCamlTypes.NOT_EQ;
            } 
            // fall through
          case 225: break;
          case 75: 
            { return OCamlTypes.SEMISEMI;
            } 
            // fall through
          case 226: break;
          case 76: 
            { return OCamlTypes.L_AND;
            } 
            // fall through
          case 227: break;
          case 77: 
            { commentDepth += 1;
            } 
            // fall through
          case 228: break;
          case 78: 
            { commentDepth -= 1; if (commentDepth == 0) { inComment = false; yybegin(INITIAL); tokenEnd(); return OCamlTypes.MULTI_COMMENT; }
            } 
            // fall through
          case 229: break;
          case 79: 
            { commentDepth -= 1; if (commentDepth == 0) { inComment = false; yybegin(INITIAL); tokenEnd(); return OCamlTypes.DOC_COMMENT; }
            } 
            // fall through
          case 230: break;
          case 80: 
            { return OCamlTypes.CHAR_VALUE;
            } 
            // fall through
          case 231: break;
          case 81: 
            { return OCamlTypes.FOR;
            } 
            // fall through
          case 232: break;
          case 82: 
            { return OCamlTypes.FUN;
            } 
            // fall through
          case 233: break;
          case 83: 
            { return OCamlTypes.DOTDOTDOT;
            } 
            // fall through
          case 234: break;
          case 84: 
            { return OCamlTypes.END;
            } 
            // fall through
          case 235: break;
          case 85: 
            { return OCamlTypes.PRI;
            } 
            // fall through
          case 236: break;
          case 86: 
            { return OCamlTypes.PUB;
            } 
            // fall through
          case 237: break;
          case 87: 
            { return OCamlTypes.NOT;
            } 
            // fall through
          case 238: break;
          case 88: 
            { return OCamlTypes.NEW;
            } 
            // fall through
          case 239: break;
          case 89: 
            { return OCamlTypes.TRY;
            } 
            // fall through
          case 240: break;
          case 90: 
            { return OCamlTypes.REF;
            } 
            // fall through
          case 241: break;
          case 91: 
            { return OCamlTypes.REC;
            } 
            // fall through
          case 242: break;
          case 92: 
            { return OCamlTypes.RAW;
            } 
            // fall through
          case 243: break;
          case 93: 
            { return OCamlTypes.AND;
            } 
            // fall through
          case 244: break;
          case 94: 
            { return OCamlTypes.ASR;
            } 
            // fall through
          case 245: break;
          case 95: 
            { return OCamlTypes.SIG;
            } 
            // fall through
          case 246: break;
          case 96: 
            { return OCamlTypes.LOR;
            } 
            // fall through
          case 247: break;
          case 97: 
            { return OCamlTypes.LET;
            } 
            // fall through
          case 248: break;
          case 98: 
            { return OCamlTypes.LSR;
            } 
            // fall through
          case 249: break;
          case 99: 
            { return OCamlTypes.LSL;
            } 
            // fall through
          case 250: break;
          case 100: 
            { return OCamlTypes.MOD;
            } 
            // fall through
          case 251: break;
          case 101: 
            { return OCamlTypes.VAL;
            } 
            // fall through
          case 252: break;
          case 102: 
            { return OCamlTypes.ANNOTATION;
            } 
            // fall through
          case 253: break;
          case 103: 
            { return OCamlTypes.AT_SIGN_3;
            } 
            // fall through
          case 254: break;
          case 104: 
            { return OCamlTypes.DIRECTIVE_IF;
            } 
            // fall through
          case 255: break;
          case 105: 
            { return OCamlTypes.EQEQEQ;
            } 
            // fall through
          case 256: break;
          case 106: 
            { return OCamlTypes.NOT_EQEQ;
            } 
            // fall through
          case 257: break;
          case 107: 
            { return OCamlTypes.OPEN;
            } 
            // fall through
          case 258: break;
          case 108: 
            { return OCamlTypes.ELSE;
            } 
            // fall through
          case 259: break;
          case 109: 
            { return OCamlTypes.BOOL_VALUE;
            } 
            // fall through
          case 260: break;
          case 110: 
            { return OCamlTypes.THEN;
            } 
            // fall through
          case 261: break;
          case 111: 
            { return OCamlTypes.TYPE;
            } 
            // fall through
          case 262: break;
          case 112: 
            { return OCamlTypes.DONE;
            } 
            // fall through
          case 263: break;
          case 113: 
            { return OCamlTypes.LXOR;
            } 
            // fall through
          case 264: break;
          case 114: 
            { return OCamlTypes.LAND;
            } 
            // fall through
          case 265: break;
          case 115: 
            { return OCamlTypes.LAZY;
            } 
            // fall through
          case 266: break;
          case 116: 
            { return OCamlTypes.WITH;
            } 
            // fall through
          case 267: break;
          case 117: 
            { return OCamlTypes.WHEN;
            } 
            // fall through
          case 268: break;
          case 118: 
            { return OCamlTypes.UNIT;
            } 
            // fall through
          case 269: break;
          case 119: 
            { return OCamlTypes.NONE;
            } 
            // fall through
          case 270: break;
          case 120: 
            { return OCamlTypes.SOME;
            } 
            // fall through
          case 271: break;
          case 121: 
            { yybegin(IN_OCAML_DOC_COMMENT); commentDepth = 1; inComment = true; tokenStart();
            } 
            // fall through
          case 272: break;
          case 122: 
            { return OCamlTypes.DIRECTIVE_END;
            } 
            // fall through
          case 273: break;
          case 123: 
            { return OCamlTypes.BEGIN;
            } 
            // fall through
          case 274: break;
          case 124: 
            { return OCamlTypes.ENDIF;
            } 
            // fall through
          case 275: break;
          case 125: 
            { return OCamlTypes.RAISE;
            } 
            // fall through
          case 276: break;
          case 126: 
            { return OCamlTypes.CLASS;
            } 
            // fall through
          case 277: break;
          case 127: 
            { return OCamlTypes.WHILE;
            } 
            // fall through
          case 278: break;
          case 128: 
            { return OCamlTypes.MATCH;
            } 
            // fall through
          case 279: break;
          case 129: 
            { return OCamlTypes.DIRECTIVE_ELSE;
            } 
            // fall through
          case 280: break;
          case 130: 
            { return OCamlTypes.DIRECTIVE_ELIF;
            } 
            // fall through
          case 281: break;
          case 131: 
            { return OCamlTypes.OBJECT;
            } 
            // fall through
          case 282: break;
          case 132: 
            { return OCamlTypes.OPTION;
            } 
            // fall through
          case 283: break;
          case 133: 
            { return OCamlTypes.NONREC;
            } 
            // fall through
          case 284: break;
          case 134: 
            { return OCamlTypes.ASSERT;
            } 
            // fall through
          case 285: break;
          case 135: 
            { return OCamlTypes.DOWNTO;
            } 
            // fall through
          case 286: break;
          case 136: 
            { return OCamlTypes.STRUCT;
            } 
            // fall through
          case 287: break;
          case 137: 
            { return OCamlTypes.SWITCH;
            } 
            // fall through
          case 288: break;
          case 138: 
            { return OCamlTypes.MODULE;
            } 
            // fall through
          case 289: break;
          case 139: 
            { return OCamlTypes.METHOD;
            } 
            // fall through
          case 290: break;
          case 140: 
            { return OCamlTypes.DIRECTIVE_ENDIF;
            } 
            // fall through
          case 291: break;
          case 141: 
            { return OCamlTypes.FUNCTOR;
            } 
            // fall through
          case 292: break;
          case 142: 
            { return OCamlTypes.PRIVATE;
            } 
            // fall through
          case 293: break;
          case 143: 
            { return OCamlTypes.INCLUDE;
            } 
            // fall through
          case 294: break;
          case 144: 
            { return OCamlTypes.INHERIT;
            } 
            // fall through
          case 295: break;
          case 145: 
            { return OCamlTypes.MUTABLE;
            } 
            // fall through
          case 296: break;
          case 146: 
            { return OCamlTypes.VIRTUAL;
            } 
            // fall through
          case 297: break;
          case 147: 
            { return OCamlTypes.FUNCTION;
            } 
            // fall through
          case 298: break;
          case 148: 
            { return OCamlTypes.EXTERNAL;
            } 
            // fall through
          case 299: break;
          case 149: 
            { return OCamlTypes.EXCEPTION;
            } 
            // fall through
          case 300: break;
          case 150: 
            { return OCamlTypes.CONSTRAINT;
            } 
            // fall through
          case 301: break;
          case 151: 
            { return OCamlTypes.INITIALIZER;
            } 
            // fall through
          case 302: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
