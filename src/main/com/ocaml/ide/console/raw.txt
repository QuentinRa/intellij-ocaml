with:type nucleotide = A | C | G | T

with:type brin = nucleotide list

with:type acide =
Ala
| Arg
| Asn
| Asp
| Cys
| Glu
| Gln
| Gly
| His
| Ile
| Leu
| Lys
| Phe
| Pro
| Ser
| Thr
| Trp
| Tyr
| Val
| START
| STOP

with:val u : int list = [3; 4; 5]

with:val big_list : int list =
[3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3;
4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4;
5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5;
3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3;
4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4;
5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5;
3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3; 4; 5; 3;
4; 5; 3; 4; 5]

with:val list_c1 : (int * int * int * int * int) list = [(3, 4, 5, 3, 5)]

with:val list_c2 : (int * int * int * int * int) list =
[(3, 4, 5, 3, 5); (3, 4, 5, 3, 5)]

with:val f1 : 'a -> int = <fun>

with:val f2 : int -> int -> int -> int -> int -> int = <fun>

with:val f3 : float -> ('a -> float) -> 'a -> float -> float -> float -> float =
<fun>

with:exception E1

with:exception E2 of int * int

with:type 'a option = None | Some of 'a

with:type ('a, 'b) result = Ok of 'a | Error of 'b

with:val ( // ) : int -> int -> (int, string) result = <fun>

with:module X1 : sig  end

with:module X2 : sig type t = int val compare : 'a -> 'a -> int end

with:module My_Set :
sig
type elt = X2.t
type t = Set.Make(X2).t
val empty : t
val is_empty : t -> bool
val mem : elt -> t -> bool
val add : elt -> t -> t
val singleton : elt -> t
val remove : elt -> t -> t
val union : t -> t -> t
val inter : t -> t -> t
val diff : t -> t -> t
val compare : t -> t -> int
val equal : t -> t -> bool
val subset : t -> t -> bool
val iter : (elt -> unit) -> t -> unit
val map : (elt -> elt) -> t -> t
val fold : (elt -> 'a -> 'a) -> t -> 'a -> 'a
val for_all : (elt -> bool) -> t -> bool
val exists : (elt -> bool) -> t -> bool
val filter : (elt -> bool) -> t -> t
val partition : (elt -> bool) -> t -> t * t
val cardinal : t -> int
val elements : t -> elt list
val min_elt : t -> elt
val min_elt_opt : t -> elt option
val max_elt : t -> elt
val max_elt_opt : t -> elt option
val choose : t -> elt
val choose_opt : t -> elt option
val split : elt -> t -> t * bool * t
val find : elt -> t -> elt
val find_opt : elt -> t -> elt option
val find_first : (elt -> bool) -> t -> elt
val find_first_opt : (elt -> bool) -> t -> elt option
val find_last : (elt -> bool) -> t -> elt
val find_last_opt : (elt -> bool) -> t -> elt option
val of_list : elt list -> t
end