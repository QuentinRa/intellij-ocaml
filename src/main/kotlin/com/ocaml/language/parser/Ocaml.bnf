//noinspection BnfUnusedRuleForFile
{
  parserClass="com.ocaml.language.parser.OCamlParser"
  parserUtilClass="com.ocaml.language.parser.OCamlParserUtils"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="OCaml"
  psiImplClassSuffix="Impl"
  psiPackage="com.ocaml.language.psi"
  psiImplPackage="com.ocaml.language.psi.impl"
  psiImplUtilClass="com.ocaml.language.psi.OCamlImplUtils"

  generateTokens=true
  generateTokenAccessors=false

  elementTypeHolderClass="com.ocaml.language.psi.OCamlTypes"
  elementTypeClass="com.ocaml.language.psi.api.OCamlElementType"
  tokenTypeClass="com.ocaml.language.psi.api.OCamlTokenType"

  tokens = [
          AND = "and"
          AS = "as"
          ASSERT = "assert"
          BEGIN = "begin"
          CLASS = "class"
          CONSTRAINT = "constraint"
          DO = "do"
          DONE = "done"
          DOWNTO = "downto"
          ELSE = "else"
          END = "end"
          EXCEPTION = "exception"
          EXTERNAL = "external"
          FOR = "for"
          FUN = "fun"
          FUNCTION = "function"
          FUNCTOR = "functor"
          IF = "if"
          IN = "in"
          INCLUDE = "include"
          INHERIT = "inherit"
          INITIALIZER = "initializer"
          LAZY = "lazy"
          LET = "let"
          MODULE = "module"
          MUTABLE = "mutable"
          NEW = "new"
          NONREC = "nonrec"
          OBJECT = "object"
          OF = "of"
          OPEN = "open"
          OR = "or"
          REC = "rec"
          SIG = "sig"
          STRUCT = "struct"
          THEN = "then"
          TO = "to"
          TRY = "try"
          TYPE = "type"
          VAL = "val"
          VIRTUAL = "virtual"
          WHEN = "when"
          WHILE = "while"
          WITH = "with"
          LBRACELESS = "{<"
          GREATERRBRACE = ">}"

          MOD = "mod"
          LAND = "land"
          LOR = "lor"
          LXOR = "lxor"
          LSL = "lsl"
          LSR = "lsr"
          ASR = "asr"

          TRUE = "true"
          FALSE = "false"

          METHOD = "method"
          PRIVATE = "private"
          MATCH = "match"

          UNDERSCORE = "_"

          SHORTCUT = "::"
          RIGHT_ARROW = "->"
          LEFT_ARROW = "<-"
          LARRAY = "[|"
          RARRAY = "|]"

          EQ = "="
          NOT_EQ = "!="
          COLON_EQ = ":="
          COLON_GT = ":>"
          SEMISEMI = ";;"
          L_OR = "||"
          L_AND = "&&"

          CARRET = "^"
          MINUSDOT = "-."
          PLUS = "+"
          MINUS = "-"
          SLASH = "/"
          STAR = "*"

          COMMA = ","
          COLON = ":"
          SEMI = ";"
          SINGLE_QUOTE = "'"
          DOTDOT = ".."
          DOT = "."
          PIPE = "|"
          LPAREN = "("
          RPAREN = ")"
          LBRACE = "{"
          RBRACE = "}"
          LBRACKET = "["
          RBRACKET = "]"
          ARROBASE = "@"
          SHARP = "#"
          QUESTION_MARK = "?"
          EXCLAMATION_MARK = "!"
          DOLLAR = "$"
          BACKTICK = "`"
          TILDE = "~"
          AMPERSAND = "&"

          PERCENT = "%"

          LT = "<"
          GT = ">"

          LBRACKETGREATER = "[>"
          LBRACKETLESS = "[<"
    ]

  extends(".*typexpr")=typexpr
  extends(".*pattern")=pattern
  extends(".*expr")=expr
}

// See also: https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:keywords

file ::= unit-interface //| unit-implementation

// INTERNAL TOKENS THAT WERE NOT IN THE  DOCUMENTATION
// otherwise lowercase and capitalized are not recognized as ident
private internal_ident ::= IDENT | LOWERCASE_IDENT | CAPITALIZED_IDENT

// https://v2.ocaml.org/releases/4.14/htmlman/compunit.html#start-section
unit-interface ::=  { specification [SEMISEMI] }+
unit-implementation ::= [ module-items ]

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:labelname
private label-name ::= LOWERCASE_IDENT

private label ::=  TILDE label-name COLON

private optlabel ::=  QUESTION_MARK label-name COLON

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:lex-ops-symbols
// [CHANGE]: removed PIPE from core-operator-char
// [CHANGE]: removed linenum-directive
private infix-symbol ::= (core-operator-char | PERCENT | LT) { operator-char }*
  |  SHARP { operator-char }+

private prefix-symbol ::= EXCLAMATION_MARK { operator-char }*
  |  (QUESTION_MARK | TILDE) { operator-char }+

private operator-char ::= TILDE | EXCLAMATION_MARK | QUESTION_MARK | core-operator-char | PERCENT | LT | COLON | DOT

private core-operator-char ::= DOLLAR | AMPERSAND | STAR | PLUS | MINUS | SLASH | EQ | GT | ARROBASE | CARRET

//linenum-directive ::= SHARP { DIGIT }+ '"' { string-character } '"'

// https://v2.ocaml.org/releases/4.14/htmlman/names.html#sss:naming-objects
private value-name ::= LOWERCASE_IDENT
  |  LPAREN operator-name RPAREN

private operator-name ::= prefix-symbol | infix-op

private infix-op ::= infix-symbol
  |  STAR | PLUS | MINUS | MINUSDOT | EQ | NOT_EQ | LT | GT | OR | L_OR | AMPERSAND | L_AND | COLON_EQ
  |  MOD | LAND | LOR | LXOR | LSL | LSR | ASR

private constr-name ::= CAPITALIZED_IDENT

private tag-name ::= CAPITALIZED_IDENT

private typeconstr-name ::= LOWERCASE_IDENT

private field-name ::= LOWERCASE_IDENT

private module-name ::= CAPITALIZED_IDENT

private modtype-name ::= IDENT

private class-name ::= LOWERCASE_IDENT

private inst-var-name ::= LOWERCASE_IDENT

private method-name ::= LOWERCASE_IDENT

// https://v2.ocaml.org/releases/4.14/htmlman/names.html#sss:refer-named
private value-path ::= [ module-path DOT ] value-name

constr ::= [ module-path DOT ] constr-name

typeconstr ::= [ extended-module-path DOT ] typeconstr-name

field ::= [ module-path DOT ] field-name

modtype-path ::= [ extended-module-path DOT ] modtype-name

class-path ::= [ module-path DOT ] class-name

classtype-path ::= [ extended-module-path DOT ] class-name

module-path ::= module-name { DOT module-name }*

extended-module-path ::= extended-module-name { DOT extended-module-name }*

extended-module-name ::= module-name { LPAREN extended-module-path RPAREN }*

// https://v2.ocaml.org/releases/4.14/htmlman/types.html#s:typexpr
ident_typexpr ::= SINGLE_QUOTE ident
underscore_typexpr ::= UNDERSCORE
parenthesis_typexpr ::= LPAREN typexpr RPAREN
label_typexpr ::= typexpr RIGHT_ARROW typexpr
label_opt_typexpr ::= [QUESTION_MARK] label-name COLON typexpr RIGHT_ARROW typexpr
star_typexpr ::= typexpr { STAR typexpr }+
typeconstr_typexpr ::= typexpr typeconstr
comma_typexpr ::= LPAREN typexpr { COMMA typexpr } RPAREN typeconstr
as_typexpr ::= typexpr AS SINGLE_QUOTE ident
ltgt_typexpr ::= LT [DOTDOT] GT
ltgt_method_typexpr ::= LT method-type { SEMI method-type } [SEMI PIPE SEMI DOTDOT] GT
classtype_typexpr ::= SHARP classtype-path
classpath_typexpr ::= typexpr SHARP class-path
paren_sharp_typexpr ::= LPAREN typexpr { COMMA typexpr } RPAREN SHARP class-path
polymorphic-variant-type_typexpr ::= polymorphic-variant-type

typexpr ::= ident_typexpr
| underscore_typexpr
| parenthesis_typexpr
| label_typexpr | label_opt_typexpr
| star_typexpr
| typeconstr_typexpr
| comma_typexpr
| as_typexpr
| ltgt_typexpr
| ltgt_method_typexpr
| classtype_typexpr
| classpath_typexpr
| paren_sharp_typexpr
| polymorphic-variant-type_typexpr

poly-typexpr ::= typexpr
  |  { SINGLE_QUOTE internal_ident }+ DOT typexpr

method-type ::= method-name COLON poly-typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/types.html#sss:typexpr-polyvar
polymorphic-variant-type ::= LBRACKET tag-spec-first { PIPE tag-spec }* RBRACKET
  |  LBRACKETGREATER [ tag-spec ] { PIPE tag-spec }* RBRACKET
  |  LBRACKETLESS [PIPE] tag-spec-full { PIPE tag-spec-full }* [ GT { BACKTICK tag-name }+ ] RBRACKET

tag-spec-first ::= BACKTICK tag-name [ OF typexpr ]
  |  [ typexpr ] PIPE tag-spec

tag-spec ::= BACKTICK tag-name [ OF typexpr ]
  |  typexpr

tag-spec-full ::= BACKTICK tag-name [ OF [AMPERSAND] typexpr { AMPERSAND typexpr }* ]
  |  typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/const.html#s:const
// fixme: It seems order is important (float -> int)
private constant ::=
     float-literal
  |  char-literal
  |  string-literal
  |  integer-literal
  |  int32-literal
  |  int64-literal
  |  nativeint-literal
  |  constr
  |  FALSE
  |  TRUE
  |  LPAREN RPAREN
  |  BEGIN END
  |  LBRACKET RBRACKET
  |  LARRAY RARRAY
  |  BACKTICK tag-name

// https://v2.ocaml.org/releases/4.14/htmlman/patterns.html#s:patterns
value_pattern ::= value-name
underscore_pattern ::= UNDERSCORE
constant_pattern ::= constant
as_pattern ::= pattern as value-name
brace_pattern ::= LPAREN pattern RPAREN
brace_type_pattern ::= LPAREN pattern COLON typexpr RPAREN
pattern_pipe_pattern ::= pattern PIPE pattern
constr_pattern ::= constr pattern
backtick_pattern ::= BACKTICK tag-name pattern
sharp_pattern ::= SHARP typeconstr
comma_pattern ::= pattern { COMMA pattern }+
brace_field_pattern ::= LBRACE field [COLON typexpr] [EQ pattern]{ SEMI field [COLON typexpr] [EQ pattern]}* [SEMI UNDERSCORE] [ SEMI ] RBRACE
bracket_pattern ::= LBRACKET pattern { SEMI pattern }* [ SEMI ] RBRACKET
shortcut_pattern ::= pattern SHORTCUT pattern
larray_pattern ::= LARRAY pattern { SEMI pattern }* [ SEMI ] RARRAY
lazy_pattern ::= LAZY pattern
exception_pattern ::= EXCEPTION pattern
module_path_paren_pattern ::= module-path DOT LPAREN pattern RPAREN
module_path_bracket_pattern ::= module-path DOT LBRACKET pattern RBRACKET
module_path_array_pattern ::= module-path DOT LARRAY pattern RARRAY
module_path_brace_pattern ::= module-path DOT LBRACE pattern RBRACE
char-literal_pattern ::= char-literal DOTDOT char-literal

pattern ::= value_pattern
  |  underscore_pattern
  |  constant_pattern
  |  as_pattern
  |  brace_pattern
  |  brace_type_pattern
  |  pattern_pipe_pattern
  |  constr_pattern
  |  backtick_pattern
  |  sharp_pattern
  |  comma_pattern
  |  brace_field_pattern
  |  bracket_pattern
  |  shortcut_pattern
  |  larray_pattern
  |  char-literal_pattern
  |  lazy_pattern
  |  exception_pattern
  |  module_path_paren_pattern
  |  module_path_bracket_pattern
  |  module_path_array_pattern
  |  module_path_brace_pattern

// https://v2.ocaml.org/releases/4.14/htmlman/expr.html#s:value-expr
value_path_expr ::= value-path
constant_expr ::= constant
paren_expr ::= LPAREN expr RPAREN
begin_expr ::= BEGIN expr END
paren_type_expr ::= LPAREN expr COLON typexpr RPAREN
colon_expr ::= expr { COLON expr }+
constr_expr ::= constr expr
backtick_expr ::= BACKTICK tag-name expr
shortcut_expr ::= expr SHORTCUT expr
bracket_expr ::= LBRACKET expr { SEMI expr }* [SEMI] RBRACKET
larray_expr ::= LARRAY expr { SEMI expr }* [SEMI] RARRAY
brace_field_expr ::= LBRACE field [COLON typexpr] [EQ expr] { SEMI field [COLON typexpr] [EQ expr] }* [SEMI] RBRACE
brace_expr ::= LBRACE expr WITH field [ COLON typexpr] [EQ expr] { SEMI field [COLON typexpr] [EQ expr]}* [SEMI] RBRACE
argument_expr ::= expr { argument }+
prefix_expr ::= prefix-symbol expr
minus_expr ::= MINUS expr
minus_dot_expr ::= MINUSDOT expr
lazy_expr ::= LAZY expr
if_else_expr ::= IF expr THEN expr [ ELSE expr ]
while_expr ::= WHILE expr DO expr DONE
assert_expr ::= ASSERT expr
match_expr ::= MATCH expr WITH pattern-matching
infix_op_expr ::= expr infix-op expr
local-open_expr ::= local-open
dot_field_left_arrow_expr ::= expr DOT field LEFT_ARROW expr
dot_field_expr ::= expr DOT field
dot_paren_expr ::= DOT LPAREN expr RPAREN
dot_paren_left_arrow_expr ::= DOT LPAREN expr RPAREN LEFT_ARROW expr
dot_bracket_expr ::= DOT LBRACKET expr RBRACKET
dot_bracket_left_arrow_expr ::= DOT LBRACKET expr RBRACKET LEFT_ARROW expr
for_expr ::= FOR value-name EQ expr ( TO | DOWNTO ) expr DO expr DONE
semi_expr ::= expr SEMI expr
function_expr ::= FUNCTION pattern-matching
fun_expr ::= FUN { parameter }+ [ COLON typexpr ] RIGHT_ARROW expr
try_expr ::= TRY expr WITH pattern-matching
let_expr ::= LET [REC] let-binding { AND let-binding }* IN expr
let_exception_expr ::= LET EXCEPTION constr-decl IN expr
let_module_expr ::= LET MODULE module-name { ( module-name COLON module-type ) }* [COLON module-type ] EQ module-expr IN expr
expr_coercion_expr ::= LPAREN expr COLON_GT typexpr RPAREN
expr_type_coercion_expr ::= LPAREN expr COLON typexpr COLON_GT typexpr RPAREN

expr ::= value_path_expr
  |  constant_expr
  |  paren_expr
  |  begin_expr
  |  paren_type_expr
  |  colon_expr
  |  constr_expr
  |  backtick_expr
  |  shortcut_expr
  |  bracket_expr
  |  larray_expr
  |  brace_field_expr
  |  brace_expr
  |  argument_expr
  |  minus_expr
  |  minus_dot_expr
  |  infix_op_expr
  |  dot_field_expr
  |  dot_field_left_arrow_expr
  |  dot_paren_expr
  |  dot_paren_left_arrow_expr
  |  dot_bracket_expr
  |  dot_bracket_left_arrow_expr
  |  if_else_expr
  |  while_expr
  |  for_expr
  |  semi_expr
  |  match_expr
  |  function_expr
  |  fun_expr
  |  try_expr
  |  let_expr
  |  let_exception_expr
  |  let_module_expr
  |  expr_coercion_expr
  |  expr_type_coercion_expr
  |  assert_expr
  |  lazy_expr
  |  local-open_expr
  |  object_expr_internal_rec_expr | object_expr_internal_expr

argument ::= expr
  |  TILDE label-name
  |  TILDE label-name COLON expr
  |  QUESTION_MARK label-name
  |  QUESTION_MARK label-name COLON expr

pattern_expr ::= pattern [WHEN expr] RIGHT_ARROW expr
pattern-matching ::= [ PIPE ] pattern_expr { PIPE pattern_expr }*

let-binding ::= pattern EQ expr
  |  value-name { parameter }* [COLON typexpr] [COLON_GT typexpr] EQ expr
  |  value-name COLON poly-typexpr EQ expr

parameter ::= pattern
  |  TILDE label-name
  |  TILDE ( label-name [COLON typexpr] )
  |  TILDE label-name COLON pattern
  |  QUESTION_MARK label-name
  |  QUESTION_MARK ( label-name [COLON typexpr] [EQ expr] )
  |  QUESTION_MARK label-name COLON pattern
  |  QUESTION_MARK label-name COLON ( pattern [COLON typexpr] [EQ expr] )

local-open ::=
  LET OPEN module-path IN expr
  |  module-path DOT LPAREN expr RPAREN
  |  module-path DOT LBRACKET expr RBRACKET
  |  module-path DOT LARRAY expr RARRAY
  |  module-path DOT LBRACE expr RBRACE
  |  module-path DOT LBRACELESS expr GREATERRBRACE

object_expr_internal_rec_expr ::= expr SHARP method-name
object_expr_internal_expr ::= NEW class-path
  | OBJECT class-body END
  | inst-var-name
  | inst-var-name LEFT_ARROW expr
  | LBRACELESS [ inst-var-name [EQ expr] { SEMI inst-var-name [EQ expr] } [SEMI] ] GREATERRBRACE

// https://v2.ocaml.org/releases/4.14/htmlman/typedecl.html#ss:typedefs
type-definition ::= TYPE [NONREC] typedef { and_types }*

typedef ::= [type-params] type_name type-information

type_name ::= typeconstr-name

and_types ::= AND typedef

type-information ::= [type-equation] [type-representation] { type-constraint }*

type-equation ::= EQ typexpr

type-representation ::=
  EQ [PIPE] constr-decl { PIPE constr-decl }*
  | EQ record-decl
  | EQ PIPE

type-params ::= type-param
  |  LPAREN type-param { COMMA type-param } RPAREN

type-param ::= [ext-variance] SINGLE_QUOTE internal_ident

ext-variance ::= variance [injectivity]
  |  injectivity [variance]

variance ::= PLUS
  | MINUS

injectivity ::=  EXCLAMATION_MARK

record-decl ::= LBRACE field-decl { SEMI field-decl }* [SEMI] RBRACE

constr-decl ::= (constr-name | LBRACKET RBRACKET | LPAREN SHORTCUT RPAREN) [ OF constr-args ]

constr-args ::= typexpr { STAR typexpr }*

field-decl ::= [MUTABLE] field-name COLON poly-typexpr

type-constraint ::= CONSTRAINT typexpr EQ typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/typedecl.html#ss:exndef
exception-definition ::= EXCEPTION constr-decl
  |  EXCEPTION constr-name EQ constr

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:classes:class-types
class-type ::= [[QUESTION_MARK] label-name COLON] typexpr RIGHT_ARROW class-type
  |    class-body-type

class-body-type ::= OBJECT [( typexpr )] { class-field-spec } END
  | [[ typexpr { COMMA typexpr } ]] classtype-path
  | LET OPEN module-path IN class-body-type

class-field-spec ::= INHERIT class-body-type
  |   VAL [MUTABLE] [VIRTUAL] inst-var-name COLON typexpr
  |   VAL VIRTUAL MUTABLE inst-var-name COLON typexpr
  |   METHOD [PRIVATE] [VIRTUAL] method-name COLON poly-typexpr
  |   METHOD VIRTUAL PRIVATE method-name COLON poly-typexpr
  |   CONSTRAINT typexpr EQ typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:class-expr

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#sss:class-body
class-body ::=   [( pattern [COLON typexpr] )] { class-field }*

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:class-def
class-definition ::= CLASS class-binding { AND class-binding }*

class-binding ::= [VIRTUAL] [[ type-parameters ]] class-name { parameter } [ COLON class-type] EQ class-expr

type-parameters ::= SINGLE_QUOTE internal_ident { COMMA SINGLE_QUOTE internal_ident }

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:class-spec
class-specification ::= CLASS class-spec { AND class-spec }*

class-spec ::= [VIRTUAL] [[ type-parameters ]] class-name COLON class-type

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:classtype
classtype-definition ::= CLASS TYPE classtype-def { AND classtype-def }*

classtype-def ::= [VIRTUAL] [[ type-parameters ]] class-name EQ class-body-type