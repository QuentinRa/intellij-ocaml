
{
    parserClass='org.ocaml.lang.parser.OcamlParser'
    parserUtilClass="org.ocaml.lang.parser.OcamlParserUtil"
    psiPackage='org.ocaml.lang.parser.psi'
    psiImplPackage='org.ocaml.lang.parser.psi.impl'


    elementTypeHolderClass='org.ocaml.lang.parser.psi.OcamlCompositeElementTypes'

    elementTypeClass='org.ocaml.lang.parser.psi.OcamlCompositeElementType'
    tokenTypeClass='org.ocaml.lang.lexer.OcamlTokenElementType'

    parserImports='static org.ocaml.lang.lexer.OcamlTypes.*'

    tokens = [
        AND = "and"
        AS = "as"
        ASSERT = "assert"
        BEGIN = "begin"
        CLASS = "class"
        CONSTRAINT = "constraint"
        DO = "do"
        DONE = "done"
        DOWNTO = "downto"
        ELSE = "else"
        END = "end"
        EXCEPTION = "exception"
        EXTERNAL = "external"
        FALSE = "false"
        FOR = "for"
        FUN = "fun"
        FUNCTION = "function"
        FUNCTOR = "functor"
        IF = "if"
        IN = "in"
        INCLUDE = "include"
        INHERIT = "inherit"
        INITIALIZER = "initializer"
        LAZY = "lazy"
        LET = "let"
        MATCH = "match"
        METHOD_KEYWORD = "method"
        MODULE = "module"
        MUTABLE = "mutable"
        NEW = "new"
        NONREC = "nonrec"
        OBJECT = "object"
        OF = "of"
        OPEN = "open"
        OR = "or"
        PARSER = "parser"
        PRIVATE = "private"
        REC = "rec"
        SIG = "sig"
        STRUCT = "struct"
        THEN = "then"
        TO = "to"
        TRUE = "true"
        TRY = "try"
        TYPE = "type"
        VAL = "val"
        VIRTUAL = "virtual"
        WHEN = "when"
        WHILE = "while"
        WITH = "with"
        INFIXOP3 = "infixop3"
        INFIXOP4 = "infixop4"
        LBRACELESS = "lbrace"
        GREATERRBRACE = "greaterbrace"
        LESSMINUS = "lessminus"

        SHARP = "#"
        AMPERSAND = "&"
        AMPERAMPER = "&&"
        BACKQUOTE = "`"
        QUOTE = "'"
        LPAREN = "("
        RPAREN = ")"
        STAR = "*"
        COMMA = ","
        MINUSGREATER = "->"
        DOT = "."
        DOTDOT = ".."
        COLON = ":"
        COLONCOLON = "::"
        COLONEQUAL = ":="
        COLONGREATER = ":>"
        SEMI = ";"
        SEMISEMI = ";;"
        LESS = "<"
        LESSMINUS = "<-"
        EQUAL = "="
        LBRACKET = "["
        LBRACKETBAR = "[|"
        LBRACKETLESS = "[<"
        LBRACKETGREATER = "[>"
        RBRACKET = "]"
        LBRACE = "{"
        LBRACELESS = "{<"
        BAR = "|"
        BARBAR = "||"
        BARRBRACKET = "|]"
        GREATER = ">"
        GREATERRBRACKET = ">]"
        RBRACE = "}"
        GREATERRBRACE = ">}"
        LBRACKETAT = "[@"
        LBRACKETATAT = "[@@"
        LBRACKETATATAT = "[@@@"
        LBRACKETPERCENT = "[%"
        LBRACKETPERCENTPERCENT = "[%%"
        BANG = "!"
        INFIXOP0 = "!="
        PLUS = "+"
        PLUSDOT = "+."
        PLUSEQ = "+="
        MINUS = "-"
        MINUSDOT = "-."

        space       = 'regexp:\s+'
    ]

    //generateTokens=false
    //generateTokenAccessors=true

    extends(".*pattern_no_exn")=pattern_no_exn
    extends(".*pattern_expression")=pattern_expression
    extends("coloncolon_app_rule|label_assign_expr|ref_read_bin_expr|infixop4_bin_expr|ref_assign_bin_expr|sign_unary_expr|mul_bin_expr|sum_bin_expr|infixop1_bin_expr|and_bin_expr|or_bin_expr|compare_bin_expr|coloncolon_bin_expr|expr_comma_list|non_op_expr|expr")=expr
    extends("first_class_module_expr|sharpop_expr|.*_object_expr|.*_with_local_open_expr|prefix_op_expr|bang_expr|list_constructor_expr|array_constructor_expr|.*_assign_expr|.*_lookup_expr|record_constructor_expr|sharp_op_expr|non_op_simple_expr|simple_expr")=simple_expr

}
/* Entry points */

implementation ::=
    structure

//ml_interface ::=
//    signature ?
//
//toplevel_phrase ::=
//    top_structure SEMISEMI
//  | toplevel_directive SEMISEMI
//  | EOF
//
//top_structure ::=
//    seq_expr post_item_attributes ?
//
//  | top_structure_tail
//
//
//top_structure_tail ::=
//    /* empty */
//  | structure_item top_structure_tail
//
//use_file ::=
//    use_file_body
//
//use_file_body ::=
//    use_file_tail
//  | seq_expr post_item_attributes ? use_file_tail
//
//
//use_file_tail ::=
//    EOF
//
//  | SEMISEMI EOF
//
//  | SEMISEMI seq_expr post_item_attributes ? use_file_tail
//
//  | SEMISEMI structure_item use_file_tail
//
//  | SEMISEMI toplevel_directive use_file_tail
//
//  | structure_item use_file_tail
//
//  | toplevel_directive use_file_tail
//
//
//parse_core_type ::=
//    core_type EOF
//
//parse_expression ::=
//    seq_expr EOF
//
//parse_pattern ::=
//    pattern_expression EOF
//
//
///* Module expressions */

functor_arg ::=
    LPAREN RPAREN
  | LPAREN functor_arg_name COLON module_type RPAREN

functor_arg_name ::=
    UIDENT
  | UNDERSCORE

functor_args ::=
    functor_arg +

module_expr_sufix ::=
    (LPAREN module_expr RPAREN | LPAREN RPAREN | module_expr attribute) +

module_expr ::=
    mod_longident module_expr_sufix?
  | STRUCT attributes ? structure END module_expr_sufix?
  | FUNCTOR attributes ? functor_args MINUSGREATER module_expr module_expr_sufix?
  | LPAREN module_expr COLON module_type RPAREN
  | LPAREN module_expr RPAREN
  | LPAREN VAL attributes ? expr RPAREN
  | LPAREN VAL attributes ? expr COLON package_type RPAREN
  | LPAREN VAL attributes ? expr COLON package_type COLONGREATER package_type
    RPAREN
  | LPAREN VAL attributes ? expr COLONGREATER package_type RPAREN
  | extension

structure ::=
    (seq_expr post_item_attributes?)? (SEMISEMI seq_expr post_item_attributes? | SEMISEMI | structure_item)*

structure_item ::=
    let_bindings
  | primitive_declaration
  | value_description
  | str_type_extension
  | type_declarations
  | str_exception_declaration
  | module_binding
  | rec_module_bindings
  | module_type_declaration
  | open_statement
  | class_declarations
  | class_type_declarations
  | str_include_statement
  | item_extension post_item_attributes ?
  | floating_attribute


str_include_statement ::=
    INCLUDE ext_attributes ? module_expr post_item_attributes ?

module_binding_body ::=
    EQUAL module_expr
  | COLON module_type EQUAL module_expr
  | functor_arg module_binding_body

module_binding ::=
    MODULE ext_attributes ? UIDENT module_binding_body post_item_attributes ?

rec_module_bindings ::=
    rec_module_binding and_module_binding *

rec_module_binding ::=
    MODULE ext_attributes ? REC UIDENT module_binding_body post_item_attributes ?

and_module_binding ::=
    AND attributes ? UIDENT module_binding_body post_item_attributes ?


//
///* Module types */
//

module_type_suffix ::=
    (MINUSGREATER module_type //%prec below_WITH
    | WITH with_constraints | attribute)

module_type ::=
    mty_longident module_type_suffix ?
  | SIG attributes ? signature ? END module_type_suffix ?
  | FUNCTOR attributes ? functor_args MINUSGREATER module_type module_type_suffix ?
      //%prec below_WITH
  | MODULE TYPE OF attributes ? module_expr module_type_suffix ? //%prec below_LBRACKETAT
/*  | LPAREN MODULE mod_longident RPAREN
       */
  | LPAREN module_type RPAREN module_type_suffix ?
  | extension module_type_suffix ?

signature ::=
    SEMISEMI signature ?
  | signature_item signature ?

signature_item ::=
    value_description
  | primitive_declaration
  | sig_type_extension
  | type_declarations
  | sig_exception_declaration
  | module_declaration
  | module_alias
  | rec_module_declarations
  | module_type_declaration
  | open_statement
  | sig_include_statement
  | class_descriptions
  | class_type_declarations
  | item_extension post_item_attributes ?
  | floating_attribute


open_statement ::=
  OPEN override_flag ? ext_attributes ? mod_longident post_item_attributes ?

sig_include_statement ::=
    INCLUDE ext_attributes ? module_type post_item_attributes ? //%prec below_WITH

module_declaration_body ::=
    COLON module_type

  | LPAREN UIDENT COLON module_type RPAREN module_declaration_body

  | LPAREN RPAREN module_declaration_body


module_declaration ::=
    MODULE ext_attributes ? UIDENT module_declaration_body post_item_attributes ?

module_alias ::=
    MODULE ext_attributes ? UIDENT EQUAL mod_longident post_item_attributes ?

rec_module_declarations ::=
    rec_module_declaration (and_module_declaration)*


rec_module_declaration ::=
    MODULE ext_attributes ? REC UIDENT COLON module_type post_item_attributes ?

and_module_declaration ::=
    AND attributes ? UIDENT COLON module_type post_item_attributes ?


module_type_declaration_body ::=
    EQUAL module_type

module_type_declaration ::=
    MODULE TYPE ext_attributes ? ident module_type_declaration_body ?
    post_item_attributes ?


///* Class expressions */

class_declarations ::=
    class_declaration and_class_declaration *

class_declaration ::=
    CLASS ext_attributes ? VIRTUAL ? class_type_parameters ? LIDENT
    class_fun_binding post_item_attributes ?

and_class_declaration ::=
    AND attributes ? VIRTUAL ? class_type_parameters ? LIDENT class_fun_binding
    post_item_attributes ?

class_fun_binding ::=
    EQUAL class_expr

  | COLON class_type EQUAL class_expr

  | labeled_simple_pattern class_fun_binding

class_type_parameters ::=
    LBRACKET type_parameter_list RBRACKET

class_fun_def ::=
    labeled_simple_pattern + MINUSGREATER class_expr

class_expr ::=
    class_simple_expr simple_labeled_expr_list attributes ?
  | class_simple_expr attributes ?
  | FUN attributes? class_fun_def attributes ?
  | let_bindings IN class_expr attributes ?
  | extension attributes ?
//
class_simple_expr ::=
    LBRACKET core_type_comma_list RBRACKET class_longident
  | class_longident
  | OBJECT attributes ? class_structure ? END
  | LPAREN class_expr COLON class_type RPAREN
  | LPAREN class_expr RPAREN


class_structure ::=
   class_self_pattern ? class_fields ?
//
//
class_self_pattern ::=
    LPAREN pattern_expression RPAREN
  | LPAREN pattern_expression COLON core_type RPAREN


class_fields ::=
    class_field +

class_field ::=
  INHERIT override_flag ? attributes ? class_expr parent_binder ? post_item_attributes ?
  | VAL value post_item_attributes ?
  | METHOD_KEYWORD method_ post_item_attributes ?
  | CONSTRAINT attributes ? constrain_field post_item_attributes ?
  | INITIALIZER attributes ? seq_expr post_item_attributes ?
  | item_extension post_item_attributes ?
  | floating_attribute


parent_binder ::=
    AS LIDENT
//
//
value ::=
/* TODO: factorize these rules (also with method): */
    override_flag ? attributes ? MUTABLE VIRTUAL label COLON core_type
  | override_flag ? attributes ? VIRTUAL MUTABLE ? label COLON core_type
  | override_flag ? attributes ? MUTABLE ? label EQUAL seq_expr
  | override_flag ? attributes ? MUTABLE ? label type_constraint EQUAL seq_expr

method_ ::=
/* TODO: factorize those rules... */
    override_flag ? attributes ? PRIVATE VIRTUAL label COLON poly_type

  | override_flag ? attributes ? VIRTUAL PRIVATE ? label COLON poly_type
  | override_flag ? attributes ? PRIVATE ? label strict_binding
  | override_flag ? attributes ? PRIVATE ? label COLON poly_type EQUAL seq_expr
  | override_flag ? attributes ? PRIVATE ? label COLON TYPE lident_list
    DOT core_type EQUAL seq_expr



///* Class types */

class_type ::=
    class_signature
  | QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
  | OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type
  | LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
  | simple_core_type_or_tuple MINUSGREATER class_type

class_signature ::=
    LBRACKET core_type_comma_list RBRACKET clty_longident attributes ?
  | clty_longident attributes ?
  | OBJECT attributes ? class_sig_body END attributes ?
  | extension attributes ?

//
class_sig_body ::=
    class_self_type ? class_sig_fields ?


class_self_type ::=
    LPAREN core_type RPAREN

class_sig_fields ::=
    class_sig_field +

class_sig_field ::=
    INHERIT attributes ? class_signature post_item_attributes ?
  | VAL attributes ? value_type post_item_attributes ?

  | METHOD_KEYWORD attributes ? private_virtual_flags ? label COLON poly_type
    post_item_attributes ?

  | CONSTRAINT attributes ? constrain_field post_item_attributes ?

  | item_extension post_item_attributes ?

  | floating_attribute


value_type ::=
    VIRTUAL MUTABLE ? label COLON core_type
  | MUTABLE VIRTUAL ? label COLON core_type
  | label COLON core_type

constrain ::=
        core_type EQUAL core_type

constrain_field ::=
        core_type EQUAL core_type

class_descriptions ::=
    class_description (and_class_description) *

class_description ::=
    CLASS ext_attributes ? VIRTUAL ? class_type_parameters ? LIDENT COLON
    class_type post_item_attributes ?


and_class_description ::=
    AND attributes ? VIRTUAL ? class_type_parameters ? LIDENT COLON class_type
    post_item_attributes ?

class_type_declarations ::=
    class_type_declaration and_class_type_declaration *

class_type_declaration ::=
    CLASS TYPE ext_attributes ? VIRTUAL ? class_type_parameters ? LIDENT EQUAL
    class_signature post_item_attributes ?

and_class_type_declaration ::=
    AND attributes ? VIRTUAL ? class_type_parameters ? LIDENT EQUAL
    class_signature post_item_attributes ?


///* Core expressions */
//
seq_expr ::= expr (SEMI expr)*  SEMI ? //%prec below_SEMI

labeled_simple_pattern ::=
    QUESTION LPAREN label_let_pattern opt_default ? RPAREN
  | QUESTION label_var
  | OPTLABEL LPAREN let_pattern opt_default ? RPAREN
  | OPTLABEL pattern_var
  | TILDE LPAREN label_let_pattern RPAREN
  | TILDE label_var
  | LABEL_OP simple_pattern
  | simple_pattern

pattern_var ::=
    LIDENT
  | UNDERSCORE

opt_default ::=
    EQUAL seq_expr

label_let_pattern ::=
    label_var (COLON core_type)?

label_var ::=
    LIDENT

let_pattern ::=
    pattern_expression (COLON core_type) ?



//  %nonassoc IN
//  %nonassoc below_SEMI
//  %nonassoc SEMI                          /* below EQUAL ({lbl=...; lbl=...}) */
//  %nonassoc LET                           /* above SEMI ( ...; let ... in ...) */
//  %nonassoc below_WITH
//  %nonassoc FUNCTION WITH                 /* below BAR  (match ... with ...) */
//  %nonassoc AND             /* above WITH (module rec A: SIG with ... and ...) */
//  %nonassoc THEN                          /* below ELSE (if ... then ...) */
//  %nonassoc ELSE                          /* (if ... then ... else ...) */
//  %nonassoc LESSMINUS                     /* below COLONEQUAL (lbl <- x := e) */
//  %right    COLONEQUAL                    /* expr (e := e := e) */
//  %nonassoc AS
//  %left     BAR                           /* pattern (p|p|p) */
//  %nonassoc below_COMMA
//  %left     COMMA                         /* expr/expr_comma_list (e,e,e) */
//  %right    MINUSGREATER                  /* core_type2 (t -> t -> t) */
//  %right    OR BARBAR                     /* expr (e || e || e) */
//  %right    AMPERSAND AMPERAMPER          /* expr (e && e && e) */
//  %nonassoc below_EQUAL
//  %left     INFIXOP0 EQUAL LESS GREATER   /* expr (e OP e OP e) */
//  %right    INFIXOP1                      /* expr (e OP e OP e) */
//  %nonassoc below_LBRACKETAT
//  %nonassoc LBRACKETAT
//  %nonassoc LBRACKETATAT
//  %right    COLONCOLON                    /* expr (e :: e :: e) */
//  %left     INFIXOP2 PLUS PLUSDOT MINUS MINUSDOT PLUSEQ /* expr (e OP e OP e) */
//  %left     PERCENT INFIXOP3 STAR                 /* expr (e OP e OP e) */
//  %right    INFIXOP4                      /* expr (e OP e OP e) */
//  %nonassoc prec_unary_minus prec_unary_plus /* unary - */
//  %nonassoc prec_constant_constructor     /* cf. simple_expr (C versus C x) */
//  %nonassoc prec_constr_appl              /* above AS BAR COLONCOLON COMMA */
//  %nonassoc below_SHARP
//  %nonassoc SHARP                         /* simple_expr/toplevel_directive */
//  %left     SHARPOP
//  %nonassoc below_DOT
//  %nonassoc DOT
//  /* Finally, the first tokens of simple_expr are above everything else. */
//  %nonassoc BACKQUOTE BANG BEGIN CHAR FALSE FLOAT INT
//            LBRACE LBRACELESS LBRACKET LBRACKETBAR LIDENT LPAREN
//            NEW PREFIXOP STRING TRUE UIDENT
//            LBRACKETPERCENT LBRACKETPERCENTPERCENT
expr ::=
    coloncolon_app_rule
  | expr_comma_list //%prec below_COMMA
  | non_op_expr
  | ref_read_bin_expr
  | or_bin_expr
  | and_bin_expr
  | compare_bin_expr
  | infixop1_bin_expr
  | coloncolon_bin_expr
  | sum_bin_expr
  | mul_bin_expr
  | infixop4_bin_expr
  | sign_unary_expr
//  | expr attribute
//
//  | UNDERSCORE
//
//

non_op_expr ::=
    let_bindings IN seq_expr
  | LET MODULE ext_attributes ? UIDENT module_binding_body IN seq_expr
  | LET EXCEPTION ext_attributes ? constr_ident generalized_constructor_arguments ? attributes ? IN seq_expr
  | LET OPEN override_flag ? ext_attributes ? mod_longident IN seq_expr
  | FUNCTION ext_attributes ? BAR ? match_cases
  | FUN ext_attributes ? labeled_simple_pattern fun_def
  | FUN ext_attributes ? LPAREN TYPE lident_list RPAREN fun_def
  | MATCH ext_attributes ? seq_expr WITH BAR ? match_cases
  | TRY ext_attributes ? seq_expr WITH BAR ? match_cases
  | constr_longident simple_expr //%prec below_SHARP
  | name_tag simple_expr //%prec below_SHARP
  | if_else_expr
//  | IF ext_attributes ? seq_expr THEN expr
  | WHILE ext_attributes ? seq_expr DO seq_expr DONE
  | FOR ext_attributes ? pattern_expression EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
  | label_assign_expr

  | ASSERT ext_attributes ? simple_expr //%prec below_SHARP
  | LAZY ext_attributes ? simple_expr //%prec below_SHARP
  | OBJECT ext_attributes ? class_structure ? END
  | simple_expr labeled_simple_expr *
  | simple_expr //%prec below_SHARP

coloncolon_app_rule ::=
    LPAREN COLONCOLON RPAREN LPAREN expr RPAREN
    //expr already greadily matches commas
    //TODO: Replace the above rule with the following more restrited rule
    //LPAREN COLONCOLON RPAREN LPAREN expr COMMA expr RPAREN

if_else_expr ::=
    IF ext_attributes ? seq_expr THEN expr (ELSE expr) ?

ref_read_bin_expr ::=
    expr COLONEQUAL expr { rightAssociative = true }

coloncolon_bin_expr ::=
    expr COLONCOLON expr { rightAssociative = true }

compare_bin_expr ::=
    expr (INFIXOP0 | EQUAL | LESS | GREATER) expr

or_bin_expr ::=
  expr (OR | BARBAR) expr { rightAssociative = true }

and_bin_expr ::=
  expr (AMPERSAND | AMPERAMPER) expr { rightAssociative = true }

infixop1_bin_expr ::=
    expr INFIXOP1 expr

sum_bin_expr ::=
    expr (INFIXOP2 | PLUS | PLUSDOT | MINUS | MINUSDOT) expr

mul_bin_expr ::=
    expr (INFIXOP3 | STAR | PERCENT) expr

infixop4_bin_expr ::=
    expr INFIXOP4 expr  { rightAssociative = true }

sign_unary_expr ::=
    (subtractive | additive) expr

simple_expr ::=
    local_open_group
  | non_op_simple_expr
  | record_constructor_expr
  | assign_expr
  | lookup_expr
  | array_constructor_expr
  | list_constructor_expr
  | prefix_op_expr
  | bang_expr
  | new_object_expr
  | self_copy_object_expr
  | send_message_object_expr
  | sharpop_expr
  | first_class_module_expr


first_class_module_expr ::=
    LPAREN MODULE ext_attributes ? module_expr (COLON package_type) ? RPAREN

private local_open_group ::=
      object_copy_with_local_open_expr
    | expr_with_local_open_expr
    | list_constructor_with_local_open_expr
    | array_constructor_with_local_open_expr
    | record_constructor_with_local_open_expr
    | first_class_module_with_local_open_expr

first_class_module_with_local_open_expr ::=
    mod_longident DOT LPAREN MODULE ext_attributes ? module_expr COLON package_type RPAREN

record_constructor_with_local_open_expr ::=
    mod_longident DOT LBRACE record_expr RBRACE

object_copy_with_local_open_expr ::=
    mod_longident DOT LBRACELESS field_expr_list ? GREATERRBRACE

expr_with_local_open_expr ::=
   mod_longident DOT LPAREN seq_expr RPAREN

list_constructor_with_local_open_expr ::=
   mod_longident DOT LBRACKET expr_semi_list SEMI ? RBRACKET

array_constructor_with_local_open_expr ::=
    mod_longident DOT LBRACKETBAR ( expr_semi_list SEMI ? )? BARRBRACKET


non_op_simple_expr ::=
    val_longident
  | constant
  | constr_longident //%prec prec_constant_constructor
  | name_tag //%prec prec_constant_constructor
  | LPAREN seq_expr RPAREN
  | BEGIN ext_attributes ? seq_expr ? END
  | LPAREN seq_expr type_constraint RPAREN
  | extension



private lookup_expr ::=
    field_lookup_expr
  | array_lookup_expr
  | string_lookup_expr
  | bigarray_lookup_expr


private assign_expr ::=
    field_assign_expr
  | array_assign_expr
  | string_assign_expr
  | bigarray_assign_expr


prefix_op_expr ::=
    PREFIXOP simple_expr

bang_expr ::=
    BANG simple_expr

new_object_expr ::=
    NEW ext_attributes ? class_longident

self_copy_object_expr ::=
    LBRACELESS field_expr_list ? GREATERRBRACE

send_message_object_expr ::=
    simple_expr SHARP label

array_constructor_expr ::=
  LBRACKETBAR (expr_semi_list SEMI ?) ? BARRBRACKET

list_constructor_expr ::=
    LBRACKET expr_semi_list SEMI ? RBRACKET

field_lookup_expr ::=
    simple_expr DOT label_longident

field_assign_expr ::=
    simple_expr DOT label_longident assignment

array_lookup_expr ::=
    simple_expr DOT LPAREN seq_expr RPAREN

array_assign_expr ::=
    simple_expr DOT LPAREN seq_expr RPAREN assignment


string_lookup_expr ::=
  simple_expr DOT LBRACKET seq_expr RBRACKET

string_assign_expr ::=
    simple_expr DOT LBRACKET seq_expr RBRACKET assignment

bigarray_lookup_expr ::=
  simple_expr DOT LBRACE expr RBRACE

bigarray_assign_expr ::=
    simple_expr DOT LBRACE expr RBRACE assignment

assignment ::=
    LESSMINUS expr

label_assign_expr ::=
    label LESSMINUS expr

record_constructor_expr ::=
    LBRACE record_expr RBRACE


sharpop_expr ::=
    simple_expr SHARPOP simple_expr


simple_labeled_expr_list ::=
  labeled_simple_expr *

labeled_simple_expr ::=
    simple_expr //%prec below_SHARP
  | label_expr


label_expr ::=
    LABEL_OP simple_expr //%prec below_SHARP
  | TILDE label_ident
  | QUESTION label_ident
  | OPTLABEL simple_expr //%prec below_SHARP

label_ident ::=
    LIDENT

lident_list ::=
    LIDENT +

val_decl ::=
    val_ident {
    mixin = "org.ocaml.lang.parser.psi.ValDeclMixin"
    }

let_binding_body ::=
    val_decl fun_binding
  | val_ident COLON typevar_list DOT core_type EQUAL seq_expr
  | val_ident COLON TYPE lident_list DOT core_type EQUAL seq_expr
  | pattern_no_exn EQUAL seq_expr
  | simple_pattern_not_ident COLON core_type EQUAL seq_expr

let_bindings ::=
    let_binding and_let_binding *

let_binding ::=
    LET ext_attributes ? REC ? let_binding_body post_item_attributes ?


and_let_binding ::=
    AND attributes ? let_binding_body post_item_attributes ?
//
//
fun_binding ::=
    strict_binding
  | type_constraint EQUAL seq_expr

strict_binding ::=
    EQUAL seq_expr
  | labeled_simple_pattern fun_binding
  | LPAREN TYPE lident_list RPAREN fun_binding

match_cases ::=
    match_case (BAR match_case) *

match_case ::=
    pattern_expression MINUSGREATER seq_expr
  | pattern_expression WHEN seq_expr MINUSGREATER seq_expr
  | pattern_expression MINUSGREATER DOT


fun_def ::=
    MINUSGREATER seq_expr
  | COLON simple_core_type MINUSGREATER seq_expr
/* Cf #5939: we used to accept (fun p when e0 -> e) */
  | labeled_simple_pattern fun_def
  | LPAREN TYPE lident_list RPAREN fun_def


expr_comma_list ::=
    expr (COMMA expr) +

record_expr ::=
    simple_expr WITH lbl_expr_list
  | lbl_expr_list
//
lbl_expr_list ::=
    lbl_expr (SEMI lbl_expr) * SEMI?
//
lbl_expr ::=
    label_longident type_constraint ? EQUAL expr
  | label_longident type_constraint ?
//
//
field_expr_list ::=
    field_expr (SEMI field_expr) * SEMI ?

field_expr ::=
    label EQUAL expr
  | label

expr_semi_list ::=
    expr (SEMI expr) *
//
type_constraint ::=
    COLON core_type
  | COLON core_type COLONGREATER core_type
  | COLONGREATER core_type
//
//opt_type_constraint ::=
//    type_constraint
//  | /* empty */
//
//
///* Patterns */
//
pattern_expression ::=
    val_ident_pattern_expression
  | comma_list_pattern_expression  //%prec below_COMMA
  | coloncolon_separated_pattern_expression
  | bar_pattern_expression
  | exception_pattern_expression
  | attribute_pattern_expression
  | pattern_gen_pattern_expression

val_ident_pattern_expression ::=
    pattern_expression AS val_ident

coloncolon_separated_pattern_expression ::=
    pattern_expression COLONCOLON pattern_expression

bar_pattern_expression ::=
    pattern_expression BAR pattern_expression

pattern_gen_pattern_expression ::=
    pattern_gen

attribute_pattern_expression ::=
    pattern_expression attribute

exception_pattern_expression ::=
    EXCEPTION ext_attributes ? pattern_expression //%prec prec_constr_appl

comma_list_pattern_expression ::=
    pattern_expression (COMMA pattern_expression) +


pattern_no_exn ::=
    val_ident_pattern_no_exn
  | comma_list_pattern_no_exn  //%prec below_COMMA
  | coloncolon_separated_pattern_no_exn
  | bar_pattern_no_exn
  | attribute_pattern_no_exn
  | pattern_gen_pattern_no_exn

val_ident_pattern_no_exn ::=
    pattern_no_exn AS val_ident

coloncolon_separated_pattern_no_exn ::=
    pattern_no_exn COLONCOLON pattern_no_exn

bar_pattern_no_exn ::=
    pattern_no_exn BAR pattern_no_exn

pattern_gen_pattern_no_exn ::=
    pattern_gen

attribute_pattern_no_exn ::=
    pattern_no_exn attribute

comma_list_pattern_no_exn ::=
    pattern_no_exn (COMMA pattern_expression) +

pattern_gen ::=
    constr_longident pattern_expression //%prec prec_constr_appl
  | name_tag pattern_expression //%prec prec_constr_appl
  | simple_pattern
  | LPAREN COLONCOLON RPAREN LPAREN pattern_expression COMMA pattern_expression RPAREN
  | LAZY ext_attributes ? simple_pattern

simple_pattern ::=
    val_decl //%prec below_EQUAL
  | simple_pattern_not_ident

simple_pattern_not_ident ::=
  UNDERSCORE
  | signed_constant DOTDOT signed_constant
  | signed_constant
  | constr_longident
  | name_tag
  | SHARP type_longident
  | LBRACE lbl_pattern_list RBRACE
  | LBRACKET pattern_semi_list SEMI ? RBRACKET
  | LBRACKETBAR pattern_semi_list SEMI ? BARRBRACKET
  | LBRACKETBAR BARRBRACKET
  | LPAREN pattern_expression RPAREN
  | LPAREN pattern_expression COLON core_type RPAREN
  | LPAREN MODULE ext_attributes ? UIDENT RPAREN
  | LPAREN MODULE ext_attributes ? UIDENT COLON package_type RPAREN
  | extension

pattern_semi_list ::=
    pattern_expression (SEMI pattern_expression) *

lbl_pattern_list ::=
    lbl_pattern (SEMI lbl_pattern) * (SEMI UNDERSCORE)? SEMI?

lbl_pattern ::=
    label_longident opt_pattern_type_constraint ? EQUAL pattern_expression
  | label_longident opt_pattern_type_constraint ?


opt_pattern_type_constraint ::=
    COLON core_type


///* Value descriptions */
//
value_description ::=
    VAL ext_attributes ? val_ident COLON core_type post_item_attributes ?



/* Primitive declarations */

primitive_declaration_body ::=
    STRING +

primitive_declaration ::=
    EXTERNAL ext_attributes ? val_ident COLON core_type EQUAL
    primitive_declaration_body post_item_attributes ?

/* Type declarations */

type_declarations ::=
    type_declaration and_type_declaration *

type_declaration ::=
    TYPE ext_attributes ? NONREC ? optional_type_parameters ? LIDENT
    type_kind ? constraints ? post_item_attributes ?

and_type_declaration ::=
    AND attributes ? optional_type_parameters ? LIDENT type_kind ? constraints ?
    post_item_attributes ?

constraints ::=
      (CONSTRAINT constrain) *

type_kind ::=
    EQUAL core_type
  | EQUAL PRIVATE core_type
  | EQUAL constructor_declarations
  | EQUAL PRIVATE constructor_declarations
  | EQUAL DOTDOT
  | EQUAL PRIVATE ? LBRACE label_declarations RBRACE
  | EQUAL core_type EQUAL PRIVATE ? constructor_declarations
  | EQUAL core_type EQUAL DOTDOT
  | EQUAL core_type EQUAL PRIVATE ? LBRACE label_declarations RBRACE


optional_type_parameters ::=
    optional_type_parameter
  | LPAREN optional_type_parameter_list RPAREN

optional_type_parameter ::=
    type_variance ? optional_type_variable

optional_type_parameter_list ::=
    optional_type_parameter (COMMA optional_type_parameter) *

optional_type_variable ::=
    QUOTE ident
  | UNDERSCORE

type_parameters ::=
    type_parameter
  | LPAREN type_parameter_list RPAREN
//
type_parameter ::=
    type_variance ? type_variable

type_variance ::=
    PLUS
  | MINUS

type_variable ::=
    QUOTE ident

type_parameter_list ::=
    type_parameter ( COMMA type_parameter ) *

constructor_declarations ::=
    BAR ? constructor_declaration (BAR constructor_declaration) *

constructor_declaration ::=
    constr_ident generalized_constructor_arguments ? attributes ?

str_exception_declaration ::=
    EXCEPTION ext_attributes ? constr_ident EQUAL constr_longident attributes ?
    post_item_attributes ?
  | sig_exception_declaration

sig_exception_declaration ::=
  EXCEPTION ext_attributes ? constr_ident generalized_constructor_arguments ?
          attributes ? post_item_attributes ?




generalized_constructor_arguments ::=
    OF constructor_arguments
  | COLON constructor_arguments MINUSGREATER simple_core_type
  | COLON simple_core_type

constructor_arguments ::=
    core_type_list
  | LBRACE label_declarations RBRACE
//
label_declarations ::=
    label_declaration (SEMI attributes ? label_declaration) * (SEMI attributes ?)?
//
label_declaration ::=
    MUTABLE ? label COLON poly_type_no_attr attributes ?

///* Type Extensions */

str_type_extension ::=
  TYPE ext_attributes ? NONREC ? optional_type_parameters ? type_longident
  PLUSEQ PRIVATE ? str_extension_constructors post_item_attributes ?

sig_type_extension ::=
  TYPE ext_attributes ? NONREC ? optional_type_parameters ? type_longident
  PLUSEQ PRIVATE ? sig_extension_constructors post_item_attributes ?


str_extension_constructors ::=
    BAR ? (extension_constructor_rebind | extension_constructor_declaration ) (BAR (extension_constructor_rebind | extension_constructor_declaration ))*

sig_extension_constructors ::=
    BAR ? extension_constructor_declaration (BAR extension_constructor_declaration) *


extension_constructor_declaration ::=
    constr_ident generalized_constructor_arguments ? attributes ?

extension_constructor_rebind ::=
    constr_ident EQUAL constr_longident attributes ?

///* "with" constraints ? (additional type equations over signature components) */

with_constraints ::=
    with_constraint ( AND with_constraint ) *

with_constraint ::=
    TYPE type_parameters ? label_longident with_type_binder core_type_no_attr
    constraints ?
    /* used label_longident instead of type_longident to disallow
       functor applications in type path */
  | TYPE type_parameters ? label COLONEQUAL core_type_no_attr

  | MODULE mod_longident EQUAL mod_ext_longident

  | MODULE UIDENT COLONEQUAL mod_ext_longident

with_type_binder ::=
    EQUAL PRIVATE
  | EQUAL


///* Polymorphic types */

typevar_list ::=
    (QUOTE ident) +

poly_type ::=
    typevar_list DOT core_type
  | core_type


poly_type_no_attr ::=
        core_type_no_attr
      | typevar_list DOT core_type_no_attr


///* Core types */
//
core_type ::=
    core_type_no_attr attribute?

core_type_no_attr ::=
    (minusgreater_coretype2| core_type2) (AS QUOTE ident)?

minusgreater_coretype2 ::=
    core_type2 (MINUSGREATER core_type2)+

core_type2 ::=
    QUESTION LIDENT COLON core_type2
  | OPTLABEL core_type2
  | LIDENT COLON core_type2
  | simple_core_type_or_tuple



simple_core_type ::=
    simple_core_type2 sumple_core_type2_suffix ? ////%prec below_SHARP
  | LPAREN core_type_comma_list RPAREN ////%prec below_SHARP


sumple_core_type2_suffix ::=
    ( SHARP class_longident | type_longident ) +

simple_core_type2 ::=
    QUOTE ident
  | UNDERSCORE
  | type_longident
  | LPAREN core_type_comma_list RPAREN type_longident
//  | LESS meth_list GREATER
  | LESS GREATER
  | SHARP class_longident
  | LPAREN core_type_comma_list RPAREN SHARP class_longident
  | LBRACKET tag_field RBRACKET
/* PR#3835: this is not LR(1), would need lookahead=2
  | LBRACKET simple_core_type RBRACKET
*/
  | LBRACKET BAR row_field_list RBRACKET
//  | LBRACKET row_field BAR row_field_list RBRACKET
//  | LBRACKETGREATER BAR ? row_field_list RBRACKET
  | LBRACKETGREATER RBRACKET
//  | LBRACKETLESS BAR ? row_field_list RBRACKET
//  | LBRACKETLESS BAR ? row_field_list GREATER name_tag_list RBRACKET
  | LPAREN MODULE ext_attributes ? package_type RPAREN
  | extension

package_type ::=
    module_type

row_field_list ::=
    row_field (BAR row_field)*

row_field ::=
    tag_field
  | simple_core_type

tag_field ::=
    name_tag OF AMPERSAND ? amper_type_list attributes ?
  | name_tag attributes ?

amper_type_list ::=
    core_type_no_attr (AMPERSAND core_type_no_attr) *
//
//name_tag_list ::=
//    name_tag
//  | name_tag_list name_tag
//
simple_core_type_or_tuple ::=
    simple_core_type (STAR core_type_list) ?

core_type_comma_list ::=
    core_type (COMMA core_type) *

core_type_list ::=
    simple_core_type (STAR simple_core_type) *

//meth_list ::=
//    field_semi meth_list
//  | field_semi
//  | field
//  | DOTDOT
//
//field ::=
//  label COLON poly_type_no_attr attributes ?
//
//
//
//field_semi ::=
//  label COLON poly_type_no_attr attributes ? SEMI attributes ?

label ::=
    LIDENT

///* Constants */
//
constant ::=
    INT
  | CHAR
  | STRING
  | FLOAT

signed_constant ::=
    constant
  | MINUS INT
  | MINUS FLOAT
  | PLUS INT
  | PLUS FLOAT

/* Identifiers and long identifiers */

ident ::=
    UIDENT
  | LIDENT

val_ident ::=
    LIDENT
  | LPAREN operator RPAREN

operator ::=
    PREFIXOP
  | INFIXOP0
  | INFIXOP1
  | INFIXOP2
  | INFIXOP3
  | INFIXOP4
  | SHARPOP
  | BANG
  | PLUS
  | PLUSDOT
  | MINUS
  | MINUSDOT
  | STAR
  | EQUAL
  | LESS
  | GREATER
  | OR
  | BARBAR
  | AMPERSAND
  | AMPERAMPER
  | COLONEQUAL
  | PLUSEQ
  | PERCENT

constr_ident ::=
    UIDENT
  | LBRACKET RBRACKET
  | LPAREN RPAREN
  /* | COLONCOLON                                */
  | LPAREN COLONCOLON RPAREN
  | FALSE
  | TRUE

val_longident ::=
    val_ident
  | mod_longident DOT val_ident {
    mixin = "org.ocaml.lang.parser.psi.ValueIdentifierMixin"
}

constr_longident ::=
    mod_longident       ////%prec below_DOT
  | LBRACKET RBRACKET
  | LPAREN RPAREN
  | FALSE
  | TRUE

label_longident ::=
    LIDENT
  | mod_longident DOT LIDENT

type_longident ::=
    LIDENT
  | mod_ext_longident DOT LIDENT

mod_longident ::=
    UIDENT (DOT UIDENT) *

mod_ext_longident ::=
    UIDENT (LPAREN mod_ext_longident RPAREN | DOT UIDENT)?

mty_longident ::=
  ident (DOT ident) *


clty_longident ::=
    LIDENT
  | mod_ext_longident DOT LIDENT
//
class_longident ::=
    LIDENT
  | mod_longident DOT LIDENT
//
//
///* Toplevel directives */
//
//toplevel_directive ::=
//    SHARP ident
//  | SHARP ident STRING
//  | SHARP ident INT
//  | SHARP ident val_longident
//  | SHARP ident mod_longident
//  | SHARP ident FALSE
//  | SHARP ident TRUE


/* Miscellaneous */

name_tag ::=
    BACKQUOTE ident

direction_flag ::=
    TO
  | DOWNTO

private_virtual_flags ::=
    PRIVATE VIRTUAL
  | VIRTUAL PRIVATE
  |  PRIVATE
  | VIRTUAL


override_flag ::=
  BANG

subtractive ::=
  MINUS
  | MINUSDOT
//
additive ::=
  PLUS
  | PLUSDOT
//
//
///* Attributes and extensions */
//
single_attr_id ::=
    LIDENT
  | UIDENT
  | AND
  | AS
  | ASSERT
  | BEGIN
  | CLASS
  | CONSTRAINT
  | DO
  | DONE
  | DOWNTO
  | ELSE
  | END
  | EXCEPTION
  | EXTERNAL
  | FALSE
  | FOR
  | FUN
  | FUNCTION
  | FUNCTOR
  | IF
  | IN
  | INCLUDE
  | INHERIT
  | INITIALIZER
  | LAZY
  | LET
  | MATCH
  | METHOD_KEYWORD
  | MODULE
  | MUTABLE
  | NEW
  | NONREC
  | OBJECT
  | OF
  | OPEN
  | OR
  | PRIVATE
  | REC
  | SIG
  | STRUCT
  | THEN
  | TO
  | TRUE
  | TRY
  | TYPE
  | VAL
  | VIRTUAL
  | WHEN
  | WHILE
  | WITH
/* mod/land/lor/lxor/lsl/lsr/asr are not supported for now */


attr_id ::=
    single_attr_id (DOT attr_id)?

attribute ::=
  LBRACKETAT attr_id payload RBRACKET

post_item_attribute ::=
  LBRACKETATAT attr_id payload RBRACKET

floating_attribute ::=
  LBRACKETATATAT attr_id payload RBRACKET

post_item_attributes ::=
    post_item_attribute +

attributes ::=
  attribute +

ext_attributes ::=
    attributes
  | PERCENT attr_id attributes ?

extension ::=
  LBRACKETPERCENT attr_id payload RBRACKET

item_extension ::=
  LBRACKETPERCENTPERCENT attr_id payload RBRACKET

payload ::=
    COLON signature
  | COLON core_type
  | QUESTION pattern_expression
  | QUESTION pattern_expression WHEN seq_expr
  | structure

