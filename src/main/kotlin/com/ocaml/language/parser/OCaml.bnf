{
//  parserClass="com.ocaml.language.parser.OCamlInterfaceParser"
  parserClass="com.ocaml.language.parser.OCamlParser"
  parserUtilClass="com.ocaml.language.parser.OCamlParserUtils"

  implements='com.ocaml.language.psi.api.OCamlElement'
  extends='com.ocaml.language.psi.api.OCamlElementImpl'

  psiClassPrefix="OCaml"
  psiImplClassSuffix="Impl"
  psiPackage="com.ocaml.language.psi"
  psiImplPackage="com.ocaml.language.psi.impl"
  psiImplUtilClass="com.ocaml.language.psi.OCamlImplUtils"

  generateTokens=true
  generateTokenAccessors=false

  elementTypeHolderClass="com.ocaml.language.psi.OCamlTypes"
  elementTypeClass="com.ocaml.language.psi.api.OCamlElementType"
  tokenTypeClass="com.ocaml.language.psi.api.OCamlTokenType"

  tokens = [
          AND = "and"
          AS = "as"
          ASSERT = "assert"
          BEGIN = "begin"
          CLASS = "class"
          CONSTRAINT = "constraint"
          DO = "do"
          DONE = "done"
          DOWNTO = "downto"
          ELSE = "else"
          END = "end"
          EXCEPTION = "exception"
          EXTERNAL = "external"
          FOR = "for"
          FUN = "fun"
          FUNCTION = "function"
          FUNCTOR = "functor"
          IF = "if"
          IN = "in"
          INCLUDE = "include"
          INHERIT = "inherit"
          INITIALIZER = "initializer"
          LAZY = "lazy"
          LET = "let"
          MODULE = "module"
          MUTABLE = "mutable"
          NEW = "new"
          NONREC = "nonrec"
          OBJECT = "object"
          OF = "of"
          OPEN = "open"
          OR = "or"
          REC = "rec"
          SIG = "sig"
          STRUCT = "struct"
          THEN = "then"
          TO = "to"
          TRY = "try"
          TYPE = "type"
          VAL = "val"
          VIRTUAL = "virtual"
          WHEN = "when"
          WHILE = "while"
          WITH = "with"
          LBRACELESS = "{<"
          RGREATERRBRACE = ">}"

          MOD = "mod"
          LAND = "land"
          LOR = "lor"
          LXOR = "lxor"
          LSL = "lsl"
          LSR = "lsr"
          ASR = "asr"

          TRUE = "true"
          FALSE = "false"

          METHOD = "method"
          PRIVATE = "private"
          MATCH = "match"

          UNDERSCORE = "_"

          SHORTCUT = "::"
          RIGHT_ARROW = "->"
          LEFT_ARROW = "<-"
          LARRAY = "[|"
          RARRAY = "|]"

          EQ = "="
          NOT_EQ = "!="
          COLON_EQ = ":="
          COLON_GT = ":>"
          SEMISEMI = ";;"
          L_OR = "||"
          L_AND = "&&"

          CARET = "^"
          MINUSDOT = "-."
          PLUSEQ = "+="
          PLUS = "+"
          MINUS = "-"
          SLASH = "/"
          STAR = "*"

          COMMA = ","
          COLON = ":"
          SEMI = ";"
          SINGLE_QUOTE = "'"
          DOTDOT = ".."
          DOT = "."
          PIPE = "|"
          LPAREN = "("
          RPAREN = ")"
          LBRACE = "{"
          RBRACE = "}"
          LBRACKET = "["
          RBRACKET = "]"
          AT_SIGN = "@"
          SHARP = "#"
          QUESTION_MARK = "?"
          EXCLAMATION_MARK = "!"
          DOLLAR = "$"
          BACKTICK = "`"
          TILDE = "~"
          AMPERSAND = "&"

          PERCENT = "%"

          LT = "<"
          GT = ">"

          LBRACKETGREATER = "[>"
          LBRACKETLESS = "[<"

          EXCLAMATION_MARK_PLUS = "!+"
          EXCLAMATION_MARK_MINUS = "!-"

          COMMENT = "COMMENT"
          DOC_COMMENT = "DOC_COMMENT"
    ]

  extends(".*pattern_expression")=pattern_expression

  extends("infix_expr|non_op_expr|.*_unary_expr|expr")=expr
  extends("expr_comma_list|coloncolon_bin_expr|sign_unary_expr")=expr
  extends("simple_expr")=expr

  extends("first_class_module_expr|sharpop_expr|.*_object_expr|.*_with_local_open_expr|local_open")=simple_expr
  extends("bang_expr|list_constructor_expr|array_constructor_expr|.*_assign_expr|.*_lookup_expr")=simple_expr
  extends("record_constructor_expr|sharp_op_expr|non_op_simple_expr|simple_expr")=simple_expr
  extends("object_simple_expr")=simple_expr

  consumeTokenMethod(".*pattern_expression|.*expr") = "consumeTokenFast"
}

/*
Copyright (c) 1996 Institut National de Recherche en Informatique et en Automatique.
Copyright (c) 2021 Sidharth Kuruvila
Source: https://github.com/ocaml/ocaml/blob/4.14/parsing/parser.mly
Reference: https://v2.ocaml.org/manual/lex.html

This file is used to generate the parser. It's not a copy of the original parser,
but they are similar. This parser tries to match the documentation as much as possible,
to ensure the following updates are easy -e.g., a matter of copying the documentation-,

- [BETS]: something that I removed as it was not in the documentation, but that may have been foolish
- [CHANGES]: something that is different from the documentation
- [MISSING]: something missing in the implementation that was in the documentation
*/
file ::= COMMENT
| DOC_COMMENT
| ANNOTATION // fixme: annotations are an extension and not a comment
//| unit_interface
| unit_implementation

private infix_symbol_lexed ::= // PIPE is rejected, but all these are lexed alone
 DOLLAR | AMPERSAND | STAR | PLUS | MINUS | SLASH | EQ | GT | AT_SIGN | CARET
 // and all of them are lexed too (:> -> <- [< and [> are lexed but not valid)
 | NOT_EQ | COLON_EQ | L_OR | L_AND | MINUSDOT | PLUSEQ
 // These two are valid and lexed alone
 | LT | PERCENT
 // And this one is valid but dunno from which rule as it's not in CORE_OPERATOR_CHAR
 | EXCLAMATION_MARK

private prefix_symbol_lexed ::= EXCLAMATION_MARK | QUESTION_MARK | TILDE
| EXCLAMATION_MARK_PLUS | EXCLAMATION_MARK_MINUS

// These are not lexed as prefix symbol on purpose
// as we need them in ext_variance
private ext_variance_patch ::= EXCLAMATION_MARK_PLUS | EXCLAMATION_MARK_MINUS

// https://v2.ocaml.org/releases/4.14/htmlman/compunit.html#start-section
private unit_implementation ::= [ module_items ]
private unit_interface ::=  { specification [SEMISEMI] }*

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:lex:identifiers
// [CHANGES]: using the lexer
ident ::= capitalized_ident | lowercase_ident
capitalized_ident ::= CAPITALIZED_IDENT_VALUE
lowercase_ident ::= LOWERCASE_IDENT_VALUE | UNDERSCORE // underscore alone is not lexed as lowercase
                                                       // which is *normal* but not "expected"

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:integer-literals
// [CHANGES]: using the lexer
integer_literal ::= [MINUS] INTEGER_VALUE
int32_literal ::=  integer_literal "l"
int64_literal ::=  integer_literal "L"
nativeint_literal ::=  integer_literal "n"

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:floating-point-literals
// [CHANGES]: using the lexer
float_literal ::= [MINUS] FLOAT_VALUE

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:character-literals
// [CHANGES]: using the lexer
char_literal ::= CHAR_VALUE

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:stringliterals
// [CHANGES]: using the lexer
string_literal ::= STRING_VALUE

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:labelname
// [CHANGES]: label and optlab were commented out as they were not used
label_name ::= lowercase_ident
// label ::=  TILDE label_name COLON
// optlabel ::=  QUESTION_MARK label_name COLON

// https://v2.ocaml.org/releases/4.14/htmlman/lex.html#sss:lex-ops-symbols
// [CHANGES]: adding the "infix_symbol_patch"
// [CHANGES]: linenum-directive was commented out as they were not used
infix_symbol ::= INFIX_SYMBOL_VALUE | infix_symbol_lexed
prefix_symbol ::= PREFIX_SYMBOL_VALUE | prefix_symbol_lexed

//linenum-directive ::= SHARP { DIGIT }+ '"' { string-character } '"'

// https://v2.ocaml.org/releases/4.14/htmlman/names.html#sss:naming-objects
value_name ::= lowercase_ident
  | LPAREN operator_name RPAREN

operator_name ::= prefix_symbol | infix_op

infix_op ::= infix_symbol
  |  STAR | PLUS | MINUS | MINUSDOT | EQ | NOT_EQ | LT | GT | OR | L_OR | AMPERSAND | L_AND | COLON_EQ
  |  MOD | LAND | LOR | LXOR | LSL | LSR | ASR

constr_name ::= capitalized_ident

tag_name ::= capitalized_ident

typeconstr_name ::= lowercase_ident

field_name ::= lowercase_ident

module_name ::= capitalized_ident

modtype_name ::= ident

class_name ::= lowercase_ident

inst_var_name ::= lowercase_ident

method_name ::= lowercase_ident

// https://v2.ocaml.org/releases/4.14/htmlman/names.html#sss:refer-named
value_path ::= [ module_path DOT ] value_name

// [CHANGES]: we need to ensure that the
//constr ::= [ module_path DOT ] constr_name
constr ::= module_name DOT constr_name
| module_path DOT constr_name
| constr_name

typeconstr ::= [ extended_module_path DOT ] typeconstr_name

field ::= [ module_path DOT ] field_name

// [CHANGES]: when we "A.B.C", the parser doesn't differentiate whether the last is a modtype
// or any capital letter, which is problematic as it fails the expression.
//modtype_path ::= [ extended_module_path DOT ] modtype_name
modtype_path ::= [ extended_module_name DOT { extended_module_name DOT } *] modtype_name
| modtype_name

class_path ::= [ module_path DOT ] class_name

classtype_path ::= [ extended_module_path DOT ] class_name

module_path ::= module_name { DOT module_name }*

extended_module_path ::= extended_module_name { DOT extended_module_name }*

extended_module_name ::= module_name { LPAREN extended_module_path RPAREN }*

// https://v2.ocaml.org/releases/4.14/htmlman/types.html#s:typexpr
typexpr ::= typexpr_no_attr

private typexpr_no_attr ::=
    { typexpr2 { RIGHT_ARROW typexpr2 }+ | typexpr2 } // ... typexpr -> typexpr
    [AS SINGLE_QUOTE ident]                           // typexpr as ' ident

private typexpr2 ::=
    [QUESTION_MARK] label_name COLON typexpr2        // [[?]label-name:] typexpr -> typexpr
  | simple_typexpr_or_tuple

private simple_typexpr_or_tuple ::=
    simple_typexpr [ STAR simple_typexpr { STAR simple_typexpr }* ] // typexpr { * typexpr }+

private simple_typexpr ::=
    simple_typexpr2 { typeconstr } *                 // typexpr typeconstr
  | LPAREN typexpr { COMMA typexpr }* RPAREN simple_typexpr2_suffix

private simple_typexpr2_suffix ::= SHARP class_path  // ( typexpr { , typexpr } ) # class-path
| typeconstr *                                       // ( typexpr { , typexpr } ) typeconstr
                                                     // and "typexpr typeconstr" transitively as "( typexpr { , typexpr } )" is a typexpr

private simple_typexpr2 ::=
    SINGLE_QUOTE ident                               // ' ident
  | UNDERSCORE                                       // _
  | typeconstr                                       // typeconstr
  | SHARP classtype_path                             // # classtype-path
  | LPAREN typexpr RPAREN                            // ( typexpr )
  | LT [DOTDOT] GT                                   // < [..] >
  | polymorphic_variant_type                         // polymorphic-variant-type
  // Examples: type x = <a:int;> or <a:int;..> or <a:int>
  | LT method_type { COLON method_type }* [SEMI | SEMI DOTDOT] GT // < method-type { ; method-type } [; | ; ..] >
  | first_class_module_typexpr

poly_typexpr ::=
    { SINGLE_QUOTE ident }+ DOT typexpr
  | typexpr

private poly_typexpr_no_attr ::=
    { SINGLE_QUOTE ident }+ DOT typexpr_no_attr
  | typexpr_no_attr

method_type ::= method_name COLON poly_typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/types.html#sss:typexpr-polyvar
polymorphic_variant_type ::= LBRACKET tag_spec_first { PIPE tag_spec }* RBRACKET
  |  LBRACKETGREATER [ tag_spec ] { PIPE tag_spec }* RBRACKET
  |  LBRACKETLESS [PIPE] tag_spec_full { PIPE tag_spec_full }* [ GT { BACKTICK tag_name }+ ] RBRACKET

tag_spec_first ::= BACKTICK tag_name [ OF typexpr ]
  |  [ typexpr ] PIPE tag_spec

tag_spec ::= BACKTICK tag_name [ OF typexpr ]
  |  typexpr

tag_spec_full ::= BACKTICK tag_name [ OF [AMPERSAND] typexpr { AMPERSAND typexpr }* ]
  |  typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/const.html#s:const
constant ::= integer_literal
 |  int32_literal
 |  int64_literal
 |  nativeint_literal
 |  float_literal
 |  char_literal
 |  string_literal
 |  constr
 |  FALSE
 |  TRUE
 |  LPAREN RPAREN
 |  BEGIN END
 |  LBRACKET RBRACKET
 |  LARRAY RARRAY
 |  BACKTICK tag_name

// https://v2.ocaml.org/releases/4.14/htmlman/patterns.html#s:patterns
pattern_expression ::=
    val_ident_pattern_expression
  | comma_list_pattern_expression
  | shortcut_pattern_expression
  | bar_pattern_expression
  | exception_pattern_expression
  | pattern_gen_pattern_expression

val_ident_pattern_expression ::= pattern_expression AS value_name                // pattern as value-name
comma_list_pattern_expression ::= pattern_expression { COMMA pattern_expression } + // pattern { , pattern }+
shortcut_pattern_expression ::= pattern_expression SHORTCUT pattern_expression   // pattern :: pattern
bar_pattern_expression ::= pattern_expression PIPE pattern_expression            // pattern | pattern
exception_pattern_expression ::= EXCEPTION pattern_expression                    // exception pattern
pattern_gen_pattern_expression ::= pattern_gen

private pattern_gen ::= constr pattern_expression                                // constr pattern
  | BACKTICK tag_name pattern_expression                                         // `tag-name pattern
  | simple_pattern
  | LAZY simple_pattern                                                          // lazy pattern

private simple_pattern ::=
    module_path DOT LPAREN pattern_expression RPAREN                             //  module-path .( pattern )
  | module_path DOT LBRACKET pattern_expression RBRACKET                         //  module-path .[ pattern ]
  | module_path DOT LARRAY pattern_expression RARRAY                             //  module-path .[| pattern |]
  | module_path DOT LBRACE pattern_expression RBRACE                             //  module-path .{ pattern }
  | value_name                                                                   // value-name
  | simple_pattern_not_ident

private simple_pattern_not_ident ::= char_literal DOTDOT char_literal            // char-literal .. char-literal
  | UNDERSCORE                                                                   // _
  | constant                                                                     // constant
  | SHARP typeconstr                                                             // #typeconstr
  | LBRACE field_expr_list RBRACE                                                // { field [: typexpr] [= pattern]{ ; field [: typexpr] [= pattern] } [; _ ] [ ; ] }
  | LBRACKET pattern_expression { SEMI pattern_expression } * [SEMI] RBRACKET    // [ pattern { ; pattern } [ ; ] ]
  | LARRAY pattern_expression { SEMI pattern_expression } * [SEMI] RARRAY        // [| pattern { ; pattern } [ ; ] |]
  | LPAREN pattern_expression RPAREN                                             // ( pattern )
  | LPAREN pattern_expression COLON typexpr RPAREN                               // ( pattern : typexpr )
  | first_class_module_pattern
  | gadts_pattern

pattern_no_exn ::=
    val_ident_pattern_expression
  | comma_list_pattern_expression
  | shortcut_pattern_expression
  | bar_pattern_expression
  | pattern_gen_pattern_expression

// https://v2.ocaml.org/releases/4.14/htmlman/expr.html#s:value-expr
// [CHANGES]: added [SEMI]
private seq_expr ::= expr { SEMI expr } *  [SEMI] // expr ; expr

expr ::=
    expr_comma_list
  | minus_unary_expr | minusdot_unary_expr | prefix_unary_expr
  | non_op_expr
  | coloncolon_bin_expr
  | infix_expr

expr_comma_list ::= expr { COMMA expr } +                               // expr { , expr } +
coloncolon_bin_expr ::= expr SHORTCUT expr { rightAssociative = true }  // expr :: expr
infix_expr ::= expr infix_op expr                                       // expr infix-op expr
minus_unary_expr ::= MINUS expr                                         // - expr
minusdot_unary_expr ::= MINUSDOT expr                                   // -. expr
prefix_unary_expr ::= prefix_symbol expr                                // prefix-symbol expr

// [BETS]: removed "FUN LPAREN TYPE lident_list RPAREN fun_def"
// [BETS]: removed "FOR pattern_expression"
non_op_expr ::=
    pinned_let
  | FUNCTION pattern_matching                                           // function pattern-matching
  | FUN { parameter } + [ COLON simple_typexpr ] RIGHT_ARROW seq_expr   // fun { parameter }+ [ : typexpr ] -> expr
  | MATCH seq_expr WITH pattern_matching                                // match expr with pattern-matching
  | TRY seq_expr WITH pattern_matching                                  // try expr with pattern-matching
  | constr simple_expr                                                  // constr expr
  | BACKTICK tag_name simple_expr                                       // `tag-name expr
  | IF expr THEN expr [ELSE expr]                                       // if expr then expr [ else expr ]
  | WHILE seq_expr DO seq_expr DONE                                     // while expr do expr done
  | FOR value_name EQ seq_expr (TO | DOWNTO) seq_expr DO seq_expr DONE  // for value-name = expr ( to | downto ) expr do expr done
  | ASSERT simple_expr                                                  // assert expr
  | LAZY simple_expr                                                    // lazy expr
  | object_expr
  | simple_expr { argument } +                                         // expr { argument }+
  | simple_expr

private pinned_let ::=
  LET EXCEPTION constr_decl IN seq_expr // let exception constr-decl in expr
| LET module_binding IN seq_expr        // let module module-name { ( module-name : module-type ) } [ : module-type ]  = module-expr in expr
| let_bindings IN seq_expr              // let [rec] let-binding { and let-binding } in expr
{ pin(".*")="IN" }

simple_expr ::=
  local_open_group
  | non_op_simple_expr
  | record_constructor_expr
  | assign_expr
  | lookup_expr
  | array_constructor_expr
  | list_constructor_expr
  | object_simple_expr | self_copy_object_expr | send_message_object_expr
  | first_class_module_expr

non_op_simple_expr ::= value_path                  // value-path
  | constant                                       // constant
  | constr                                         // **** duplicate
  | BACKTICK ident                                 // **** duplicate
  | LPAREN seq_expr RPAREN                         // ( expr )
  | BEGIN [seq_expr] END                           // begin expr end
  | LPAREN seq_expr COLON typexpr RPAREN           // ( expr : typexpr )
  | LPAREN seq_expr COLON_GT typexpr RPAREN        // ( expr :> typexpr )
  | LPAREN seq_expr COLON typexpr COLON_GT typexpr RPAREN // ( expr : typexpr :> typexpr )

record_constructor_expr ::=
    LBRACE record_expr RBRACE

//  { field [: typexpr] [= expr]{ ; field [: typexpr] [= expr] } [;] }
//  { expr with field [: typexpr] [= expr]{ ; field [: typexpr] [= expr] } [;] }
private record_expr ::=
    simple_expr WITH field_expr_list
  | field_expr_list

private field_expr_list ::=
    field [COLON typexpr] [EQ expr] { SEMI field [COLON typexpr] [EQ expr]}* [SEMI]

private assign_expr ::=
    field_assign_expr
  | array_assign_expr
  | string_assign_expr
  | bigarray_assign_expr

private lookup_expr ::=
    field_lookup_expr
  | array_lookup_expr
  | string_lookup_expr
  | bigarray_lookup_expr

// [CHANGES]: there is a problem about operators after "<-" that are matching the
// "... operator expr" pattern while it should include the operator in expr.
private priority_patch ::= [operator_name] expr

field_lookup_expr ::= simple_expr DOT field                                                 // expr . field
field_assign_expr ::= simple_expr DOT field LEFT_ARROW priority_patch                       // expr . field <- expr
array_lookup_expr ::= simple_expr DOT LPAREN seq_expr RPAREN                                // expr .( expr )
array_assign_expr ::= simple_expr DOT LPAREN seq_expr RPAREN LEFT_ARROW priority_patch      // expr .( expr ) <- expr
string_lookup_expr ::= simple_expr DOT LBRACKET seq_expr RBRACKET                           // expr .[ expr ]
string_assign_expr ::= simple_expr DOT LBRACKET seq_expr RBRACKET LEFT_ARROW priority_patch // expr .[ expr ] <- expr

array_constructor_expr ::= LBRACKET [expr { SEMI expr }* [SEMI]] RBRACKET // // [| expr { ; expr } [;] |]
list_constructor_expr ::= LARRAY [expr { SEMI expr }* [SEMI]] RARRAY // // [ expr { ; expr } [;] ]

// Other elements
argument ::= simple_expr
  | TILDE label_name COLON simple_expr
  | TILDE label_name
  | QUESTION_MARK label_name COLON simple_expr
  | QUESTION_MARK label_name

pattern_matching ::=
    [PIPE] pattern_expression [WHEN seq_expr] RIGHT_ARROW seq_expr
    { PIPE  pattern_expression [WHEN seq_expr] RIGHT_ARROW seq_expr }*

let_binding ::= value_name COLON poly_typexpr EQ seq_expr
| value_name {parameter}* [COLON typexpr] [COLON_GT typexpr] EQ seq_expr
| pattern_no_exn EQ seq_expr
| abstract_types_let_binding
// todo: the mixin is only partially implemented
{
    implements=["com.ocaml.language.psi.api.OCamlNameIdentifierOwner"; "com.ocaml.language.psi.api.OCamlLetDeclaration"]
    mixin="com.ocaml.language.psi.mixin.OCamlLetBindingMixin"
    extends = "com.ocaml.language.psi.api.OCamlStubbedElementImpl<?>"
    stubClass = "com.ocaml.language.psi.stubs.OCamlLetBindingStub"
    elementTypeFactory = "com.ocaml.language.psi.OCamlImplUtilsKt.factory"
    pin(".*")="EQ"
}

parameter ::=
   TILDE LPAREN label_name [COLON typexpr] RPAREN
 | TILDE label_name COLON pattern_expression RPAREN
 | TILDE label_name
 | QUESTION_MARK LPAREN label_name [COLON typexpr] [EQ seq_expr] RPAREN
 | QUESTION_MARK label_name COLON pattern_expression
 | QUESTION_MARK label_name COLON LPAREN pattern_expression [COLON typexpr] [EQ seq_expr] RPAREN
 | QUESTION_MARK label_name
 | pattern_expression
 | abstract_types_parameter

// START LOCAL_OPEN
private local_open_group ::= local_open
 | object_copy_with_local_open_expr
 | expr_with_local_open_expr
 | list_constructor_with_local_open_expr
 | array_constructor_with_local_open_expr
 | record_constructor_with_local_open_expr

local_open ::= LET OPEN module_path IN seq_expr
expr_with_local_open_expr ::= module_path DOT LPAREN seq_expr RPAREN
list_constructor_with_local_open_expr ::= module_path DOT LBRACKET seq_expr RBRACKET
object_copy_with_local_open_expr ::= module_path DOT LBRACELESS seq_expr RGREATERRBRACE
array_constructor_with_local_open_expr ::= module_path DOT LARRAY seq_expr RARRAY
record_constructor_with_local_open_expr ::= module_path DOT LBRACE seq_expr RBRACE
// END LOCAL_OPEN

// START OBJECT_EXPR
// [CHANGES]: was split in 4
// [CHANGES]: removed "inst_var_name" but no a good idea imo (dunno where to add it)
object_expr ::= inst_var_name LEFT_ARROW expr    // inst-var-name <- expr
| OBJECT class_body END                          // object class-body end

object_simple_expr ::= NEW class_path            // new class-path
// {< [ inst-var-name [= expr] { ; inst-var-name [= expr] } [;] ] >}
self_copy_object_expr ::= LBRACELESS [field_expr { SEMI field_expr } * [SEMI]] RGREATERRBRACE
send_message_object_expr ::= simple_expr SHARP method_name // expr # method_name

private field_expr ::= inst_var_name [EQ expr]
// END OBJECT_EXPR

// https://v2.ocaml.org/releases/4.14/htmlman/typedecl.html#ss:typedefs
type_definition ::= TYPE [NONREC] typedef { type_definition_and }* { pin=1 }
private type_definition_and ::= AND typedef { pin=1 }

// [BETS]: used type_params instead of optional_type_parameters
typedef ::= [type_params] typeconstr_name type_information

type_information ::= [type_equation] [type_representation] { type_constraint }*

// [BETS]: removed a bunch of stuff with private opt
type_equation ::= EQ typexpr
| private_type_equation

type_representation ::=
    EQ [PIPE] constr_decl { PIPE constr_decl } *
  | EQ record_decl
  | EQ PIPE
  | private_type_representation
  | type_extension_representation

type_params ::= type_param
  |  LPAREN type_param { COMMA type_param }* RPAREN

type_param ::= [ext_variance] SINGLE_QUOTE ident
| gadts_type_param

ext_variance ::= variance [injectivity]
  |  injectivity [variance]
  |  ext_variance_patch

variance ::= PLUS | MINUS

injectivity ::= EXCLAMATION_MARK

record_decl ::= LBRACE field_decl { SEMI field_decl }* [SEMI] RBRACE

// [BETS]: removed "| COLON constr_args RIGHT_ARROW simple_core_type"
// [BETS]: removed "| COLON simple_core_type"
constr_decl ::= gadts_constr_decl
| constr_decl_name [OF constr_args]

// true and false cannot be used as a lowercase_ident
private constr_decl_name ::= constr_name
| LBRACKET RBRACKET
| LPAREN SHORTCUT RPAREN
| TRUE | FALSE
| LPAREN RPAREN

// [MAJOR]: used simple_typeexpr
constr_args ::= simple_typexpr { STAR simple_typexpr } *
| inline_records_constr_args

field_decl ::= [MUTABLE] field_name COLON poly_typexpr_no_attr

type_constraint ::= CONSTRAINT typexpr EQ typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/typedecl.html#ss:exndef
exception_definition ::= exception_specification
| EXCEPTION constr_name EQ constr
{ pin(".*")=1 }

exception_specification ::= EXCEPTION constr_decl
{ pin=1 }

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:classes:class-types
// [CHANGES]: using simple_core_type_or_tuple
// [BETS]: using RAW opt label
// [OPT]: go back to two lines?
class_type ::=
    QUESTION_MARK lowercase_ident COLON simple_typexpr_or_tuple RIGHT_ARROW class_type
  | lowercase_ident COLON simple_typexpr_or_tuple RIGHT_ARROW class_type
  | simple_typexpr_or_tuple RIGHT_ARROW class_type
  | class_body_type

class_body_type ::=
      OBJECT [LPAREN typexpr RPAREN] { class_field_spec } * END
    | LBRACKET typexpr { COMMA typexpr } * RBRACKET classtype_path
    | LET OPEN module_path IN class_body_type

class_field_spec ::=
    INHERIT class_body_type
  | VAL [MUTABLE] [VIRTUAL] inst_var_name COLON typexpr
  | VAL VIRTUAL MUTABLE inst_var_name COLON typexpr
  | METHOD [PRIVATE] [VIRTUAL] method_name COLON poly_typexpr
  | METHOD VIRTUAL PRIVATE method_name COLON poly_typexpr
  | CONSTRAINT typexpr EQ typexpr

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:class-expr
class_expr ::=
    class_simple_expr { argument } +
  | class_simple_expr
  | FUN { parameter } + RIGHT_ARROW class_expr
  | let_bindings IN class_expr
  | LET OPEN module_path IN class_expr

private class_simple_expr ::=
    LBRACKET typexpr { COMMA typexpr } * RBRACKET class_path
  | class_path
  | OBJECT class_body END
  | LPAREN class_expr COLON class_type RPAREN
  | LPAREN class_expr RPAREN

class_field ::=
    INHERIT class_expr [AS lowercase_ident]
  | INHERIT [EXCLAMATION_MARK] class_expr [AS lowercase_ident]
  | VAL [MUTABLE] inst_var_name [COLON typexpr] EQ seq_expr
  | VAL [EXCLAMATION_MARK] [MUTABLE] inst_var_name [COLON typexpr] EQ seq_expr
  | VAL [MUTABLE] VIRTUAL inst_var_name COLON typexpr
  | VAL VIRTUAL MUTABLE inst_var_name COLON typexpr
  | METHOD [PRIVATE] method_name class_field_strict_binding
  | METHOD EXCLAMATION_MARK [PRIVATE] method_name class_field_strict_binding
  | METHOD [PRIVATE] method_name COLON poly_typexpr EQ seq_expr
  | METHOD EXCLAMATION_MARK [PRIVATE] method_name COLON poly_typexpr EQ seq_expr
  | METHOD [PRIVATE] VIRTUAL method_name COLON poly_typexpr
  | METHOD VIRTUAL PRIVATE method_name COLON poly_typexpr
  | CONSTRAINT typexpr EQ typexpr
  | INITIALIZER seq_expr
  | abstract_types_class_field

private class_field_strict_binding ::= { parameter } * [COLON typexpr] EQ seq_expr

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#sss:class-body
class_body ::= [class_self_pattern] { class_field } *

private class_self_pattern ::= LPAREN pattern_expression RPAREN
| LPAREN pattern_expression COLON typexpr RPAREN

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:class-def
class_definition ::= CLASS class_binding { AND class_binding } *

class_binding ::=
    [VIRTUAL] [class_type_parameters] class_name { parameter }*
    [COLON class_type] EQ class_expr

private class_type_parameters ::= LBRACKET type_parameters RBRACKET
type_parameters ::= SINGLE_QUOTE ident { COMMA SINGLE_QUOTE ident }*

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:class-spec
class_specification ::= CLASS class_spec { AND class_spec } *
class_spec ::= [VIRTUAL] [class_type_parameters] class_name COLON class_type

// https://v2.ocaml.org/releases/4.14/htmlman/classes.html#ss:classtype
classtype_definition ::= CLASS TYPE classtype_def { AND classtype_def } *
classtype_def ::= [VIRTUAL] [class_type_parameters] class_name EQ class_body_type

// https://v2.ocaml.org/releases/4.14/htmlman/modtypes.html#s:modtypes
private base_module_type ::= modtype_path
  | SIG [SEMISEMI] { specification [SEMISEMI] }* END // added [SEMISEMI]
  | FUNCTOR LPAREN module_name COLON module_type RPAREN RIGHT_ARROW module_type
  | LPAREN module_type RPAREN
  | module_type_typeof

private module_type_suffix ::=
    RIGHT_ARROW module_type
    | WITH mod_constraint { AND mod_constraint }*

module_type ::= base_module_type [module_type_suffix]

// [BETS]: replaced previous names/paths with others
mod_constraint ::=
    TYPE [type_params] typeconstr type_equation { type_constraint }*
  | MODULE module_path EQ extended_module_path
  | signature_substitution_mod_constraint

private specification ::=
    value_description
  | internal_type_specification
  | exception_specification
  | class_specification
  | classtype_definition
  | module_declaration
  | module_type_specification
  | open_statement
  | sig_include_statement
  | recursive_module_extension_spec
  | module_alias_spec
  | signature_substitution_spec
  | primitive_declaration

value_description ::= VAL value_name COLON typexpr
// todo: the mixin is only partially implemented
{
    implements=["com.ocaml.language.psi.api.OCamlNameIdentifierOwner"; "com.ocaml.language.psi.api.OCamlLetDeclaration"]
    mixin="com.ocaml.language.psi.mixin.OCamlValBindingMixin"
    extends = "com.ocaml.language.psi.api.OCamlStubbedElementImpl<?>"
    stubClass = "com.ocaml.language.psi.stubs.OCamlValBindingStub"
    elementTypeFactory = "com.ocaml.language.psi.OCamlImplUtilsKt.factory"
    pin=1
}

private module_declaration ::=
    MODULE module_name COLON module_type
  | MODULE module_name { LPAREN module_name COLON module_type RPAREN } * COLON module_type

private module_type_specification ::=
    MODULE TYPE modtype_name EQ module_type
  | MODULE TYPE modtype_name

private open_statement ::= OPEN module_path

private sig_include_statement ::= INCLUDE module_type

private internal_type_specification ::= type_extension_specification // priority
| type_definition

// https://v2.ocaml.org/releases/4.14/htmlman/modules.html#s:module-expr
private module_expr_sufix ::= LPAREN module_expr RPAREN

private module_expr_value ::=
    module_path
  | STRUCT [ module_items ] END
  | FUNCTOR LPAREN module_name COLON module_type RPAREN RIGHT_ARROW module_expr
  | LPAREN module_expr COLON module_type RPAREN
  | LPAREN module_expr RPAREN
  | first_class_module_modexpr

module_expr ::= module_expr_value { module_expr_sufix } *

private module_items ::= { SEMISEMI }* (definition|seq_expr)
  { { SEMISEMI }* ( definition | seq_expr) }* { SEMISEMI }*

private definition ::=
    let_bindings
  | internal_type_definition
  | exception_definition
  | module_type_definition
  | module_binding
  | open_statement
  | class_definition
  | classtype_definition
  | str_include_statement
  | recursive_module_extension_def
  | primitive_declaration

private internal_type_definition ::= type_extension_definition // first
| type_definition

let_bindings ::= LET [REC] let_binding { let_bindings_and }*   { pin=1 }
private let_bindings_and ::= AND let_binding { pin=1 }

private str_include_statement ::= INCLUDE module_expr
{ pin=1 }

module_type_definition ::= MODULE TYPE module_name EQ module_type
{ pin=2 }

private module_binding_body ::= // { ( module-name : module-type ) } [ : module-type ] = module-expr
  { LPAREN module_name COLON module_type RPAREN }*
  [COLON module_type] EQ module_expr

module_binding ::= MODULE module_name module_binding_body
{ pin=1 }

// https://v2.ocaml.org/releases/4.14/htmlman/intfc.html#s:c-overview
primitive_declaration ::=
    EXTERNAL value_name COLON typexpr EQ external_declaration
    { pin=1 }

external_declaration ::= STRING_VALUE [ STRING_VALUE [ STRING_VALUE ] ]

// (2/2) https://v2.ocaml.org/releases/4.14/htmlman/recursivemodules.html#s:recursive-modules
private recursive_module_extension_def ::=
    MODULE REC module_name COLON module_type EQ module_expr
    { AND module_name COLON module_type EQ module_expr } *

private recursive_module_extension_spec ::=
    MODULE REC module_name COLON module_type { AND module_name COLON module_type } *

// https://v2.ocaml.org/releases/4.14/htmlman/overridingopen.html#s:explicit-overriding-open
// todo...

// https://v2.ocaml.org/releases/4.14/htmlman/generalizedopens.html#s:generalized-open
// todo: ...

// (6/6) https://v2.ocaml.org/releases/4.14/htmlman/extensiblevariants.html#s:extensible-variants
private type_extension_representation ::= EQ DOTDOT
| PRIVATE EQ DOTDOT

// [BETS]: removed [NONREC]
// [BETS]: removed optional_type_parameters
// [BETS]: removed type_longident and used typeconstr
private type_extension_specification ::= TYPE [type_params] typeconstr type_extension_spec
private type_extension_definition ::= TYPE [type_params] typeconstr type_extension_def

type_extension_spec ::= PLUSEQ [PRIVATE] [PIPE] constr_decl { PIPE constr_decl } *
type_extension_def ::= PLUSEQ [PRIVATE] [PIPE] constr_def { PIPE constr_def } *

// [BETS]: used 'constr_name' instead of '... | () | [] | true | false'
// [BETS]: used 'constr' instead of '... | () | [] | true | false'
constr_def ::= constr_decl | constr_name EQ constr

// (1/1) https://v2.ocaml.org/releases/4.14/htmlman/moduletypeof.html#s:module-type-of
private module_type_typeof ::= MODULE TYPE OF module_expr

// (3/3) https://v2.ocaml.org/releases/4.14/htmlman/privatetypes.html#s:private-types
private private_type_equation ::= EQ PRIVATE typexpr

private private_type_representation ::=
    EQ PRIVATE [PIPE] constr_decl { PIPE constr_decl } *
  | EQ PRIVATE record_decl
  | EQ PRIVATE PIPE

// (1/1) https://v2.ocaml.org/releases/4.14/htmlman/modulealias.html#s:module-alias
private module_alias_spec ::= MODULE module_name EQ module_path

// (4/4) https://v2.ocaml.org/releases/4.14/htmlman/signaturesubstitution.html#s:signature-substitution
private signature_substitution_mod_constraint ::=
    TYPE [type_params] typeconstr_name COLON_EQ typexpr
    | MODULE module_path COLON_EQ extended_module_path
    | MODULE TYPE modtype_path EQ module_type
    | MODULE TYPE modtype_path COLON_EQ module_type

private signature_substitution_spec ::=
    TYPE type_subst { AND type_subst }*
    | MODULE module_name COLON_EQ extended_module_path
    | MODULE TYPE module_name COLON_EQ module_type

type_subst ::= [type_params] typeconstr_name COLON_EQ typexpr { type_constraint }*

// (1/1) https://v2.ocaml.org/releases/4.14/htmlman/inlinerecords.html#s:inline-records
private inline_records_constr_args ::= record_decl

// (4/4) https://v2.ocaml.org/releases/4.14/htmlman/gadts.html#s:gadts
private gadts_constr_decl ::= constr_name COLON [constr_args RIGHT_ARROW] typexpr
private gadts_type_param ::= [variance] UNDERSCORE
private gadts_pattern ::= constr LPAREN TYPE { typeconstr_name }+ RPAREN LPAREN pattern_expression RPAREN

matching_case ::= pattern_expression [WHEN seq_expr] RIGHT_ARROW seq_expr
| pattern_expression RIGHT_ARROW DOT

// (1/1) https://v2.ocaml.org/releases/4.14/htmlman/bigarray.html#s:bigarray-access
bigarray_lookup_expr ::= simple_expr DOT LBRACE expr_comma_list RBRACE // expr .{ expr {, expr} }
bigarray_assign_expr ::= simple_expr DOT LBRACE expr_comma_list RBRACE LEFT_ARROW expr // expr .{ expr {, expr} } <- expr

// (6/6) https://v2.ocaml.org/releases/4.14/htmlman/firstclassmodules.html#s:first-class-modules
private first_class_module_typexpr ::= LPAREN MODULE package_type RPAREN
private first_class_module_modexpr ::= LPAREN VAL expr [COLON package_type] RPAREN
first_class_module_expr ::= LPAREN MODULE module_expr [COLON package_type] RPAREN
private first_class_module_pattern ::= LPAREN MODULE module_name [COLON package_type] RPAREN

package_type ::= modtype_path WITH package_constraint { AND package_constraint }*
| modtype_path

package_constraint ::= TYPE typeconstr EQ typexpr

// (3/3) https://v2.ocaml.org/releases/4.14/htmlman/locallyabstract.html#s:locally-abstract
private abstract_types_parameter ::= LPAREN TYPE { typeconstr_name }+ RPAREN

private abstract_types_let_binding ::= value_name COLON internal_abstract_type

private abstract_types_class_field ::= METHOD [PRIVATE] method_name COLON internal_abstract_type
| METHOD EXCLAMATION_MARK [PRIVATE] COLON internal_abstract_type

private internal_abstract_type ::= TYPE { typeconstr_name }+ DOT typexpr EQ seq_expr

// https://v2.ocaml.org/releases/4.14/htmlman/attributes.html#s:attributes
// todo: ...

// https://v2.ocaml.org/releases/4.14/htmlman/extensionnodes.html#s:extension-nodes
// todo:

// https://v2.ocaml.org/releases/4.14/htmlman/generativefunctors.html#s:generative-functors
// todo:

// https://v2.ocaml.org/releases/4.14/htmlman/indexops.html#s:index-operators
// todo:

// https://v2.ocaml.org/releases/4.14/htmlman/bindingops.html#s:binding-operators
// todo: