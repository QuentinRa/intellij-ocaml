// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _OCamlLexer.flex

package com.ocaml.language.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.ocaml.language.psi.OCamlTypes.*;


public class _OCamlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\0\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\12\0\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\32\0\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\0\1\46\1\47\1\50"+
    "\1\51\1\52\1\0\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\6\0\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\1\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\21\1\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\0\1\57\3\0\1\60\6\0\1\61\1\62\14\0"+
    "\1\63\1\0\1\64\5\0\1\65\6\0\1\66\1\67"+
    "\1\70\1\71\1\72\7\0\1\73\3\0\1\74\1\75"+
    "\5\0\1\76\1\77\1\100\1\101\3\0\1\102\1\0"+
    "\1\103\4\0\1\104\1\105\3\0\1\106\1\0\1\107"+
    "\10\0\1\110\1\0\1\111\7\0\1\112\1\113\1\114"+
    "\6\0\1\115\2\0\1\116\1\117\1\120\1\0\1\121"+
    "\1\0\1\122\1\0\1\123\1\124\4\0\1\125\4\0"+
    "\1\126\10\0\1\127\1\130\1\0\1\131\7\0\1\132"+
    "\1\133\1\0\1\134\1\135\1\0\1\136\5\0\1\137"+
    "\1\140\1\141\1\0\1\142\1\143\1\144\2\0\1\145"+
    "\1\146\2\0\1\147\1\0\1\150\1\0\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\70\0\70\0\70\0\340"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\u0118\0\u0150"+
    "\0\70\0\u0188\0\u01c0\0\u01f8\0\70\0\u0230\0\70\0\70"+
    "\0\u0268\0\70\0\70\0\70\0\70\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\70\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\70\0\u0c40\0\70\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\70\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\70\0\70\0\70\0\70\0\70\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\70\0\u1068\0\u10a0"+
    "\0\u10d8\0\70\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228"+
    "\0\70\0\70\0\70\0\70\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\70\0\u1378\0\u13b0\0\u13e8\0\u1420\0\70\0\70"+
    "\0\u1458\0\u1490\0\u14c8\0\70\0\u1500\0\70\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\70\0\u16f8"+
    "\0\70\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880"+
    "\0\70\0\70\0\70\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\70\0\u1a08\0\u1a40\0\70\0\70\0\70\0\u1a78"+
    "\0\70\0\u1ab0\0\70\0\u1ae8\0\70\0\70\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\70\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\70"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68"+
    "\0\70\0\70\0\u1ea0\0\70\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\70\0\70\0\u2060\0\70\0\70"+
    "\0\u2098\0\70\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\70"+
    "\0\70\0\70\0\u21e8\0\70\0\70\0\70\0\u2220\0\u2258"+
    "\0\70\0\70\0\u2290\0\u22c8\0\70\0\u2300\0\70\0\u2338"+
    "\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\2\1\44\1\2\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\2\1\55\1\56"+
    "\3\2\1\57\1\60\1\61\1\62\71\0\1\3\111\0"+
    "\1\63\52\0\1\64\77\0\1\65\5\0\1\66\61\0"+
    "\1\67\71\0\1\70\2\0\1\71\1\72\64\0\1\73"+
    "\63\0\1\74\140\0\1\75\23\0\1\76\1\0\1\77"+
    "\40\0\1\100\52\0\1\101\3\0\1\102\53\0\1\103"+
    "\75\0\1\104\2\0\1\105\67\0\1\106\64\0\1\107"+
    "\1\0\1\110\10\0\1\111\42\0\1\112\14\0\1\113"+
    "\4\0\1\114\52\0\1\115\6\0\1\116\53\0\1\117"+
    "\3\0\1\120\10\0\1\121\2\0\1\122\4\0\1\123"+
    "\42\0\1\124\3\0\1\125\10\0\1\126\4\0\1\127"+
    "\51\0\1\130\10\0\1\131\53\0\1\132\3\0\1\133"+
    "\10\0\1\134\1\135\67\0\1\136\54\0\1\137\73\0"+
    "\1\140\10\0\1\141\55\0\1\142\5\0\1\143\1\0"+
    "\1\144\6\0\1\145\41\0\1\146\7\0\1\147\66\0"+
    "\1\150\1\151\45\0\1\152\75\0\1\153\34\0\1\154"+
    "\41\0\1\155\103\0\1\156\1\157\55\0\1\160\61\0"+
    "\1\161\103\0\1\162\67\0\1\163\7\0\1\164\63\0"+
    "\1\165\52\0\1\166\66\0\1\167\16\0\1\170\60\0"+
    "\1\171\74\0\1\172\64\0\1\173\55\0\1\174\4\0"+
    "\1\175\1\176\73\0\1\177\12\0\1\200\61\0\1\201"+
    "\65\0\1\202\62\0\1\203\4\0\1\204\65\0\1\205"+
    "\73\0\1\206\67\0\1\207\51\0\1\210\105\0\1\211"+
    "\72\0\1\212\57\0\1\213\64\0\1\214\62\0\1\215"+
    "\73\0\1\216\61\0\1\217\73\0\1\220\100\0\1\221"+
    "\54\0\1\222\105\0\1\223\3\0\1\224\57\0\1\225"+
    "\63\0\1\226\74\0\1\227\54\0\1\230\3\0\1\231"+
    "\100\0\1\232\52\0\1\233\73\0\1\234\77\0\1\235"+
    "\67\0\1\236\53\0\1\237\77\0\1\240\57\0\1\241"+
    "\67\0\1\242\67\0\1\243\103\0\1\244\51\0\1\245"+
    "\77\0\1\246\61\0\1\247\104\0\1\250\51\0\1\251"+
    "\112\0\1\252\60\0\1\253\52\0\1\254\74\0\1\255"+
    "\102\0\1\256\45\0\1\257\106\0\1\260\54\0\1\261"+
    "\77\0\1\262\76\0\1\263\66\0\1\264\61\0\1\265"+
    "\57\0\1\266\67\0\1\267\104\0\1\270\62\0\1\271"+
    "\65\0\1\272\64\0\1\273\77\0\1\274\64\0\1\275"+
    "\73\0\1\276\70\0\1\277\67\0\1\300\64\0\1\301"+
    "\70\0\1\302\54\0\1\303\104\0\1\304\70\0\1\305"+
    "\64\0\1\306\60\0\1\307\66\0\1\310\75\0\1\311"+
    "\64\0\1\312\56\0\1\313\72\0\1\314\65\0\1\315"+
    "\65\0\1\316\71\0\1\317\107\0\1\320\51\0\1\321"+
    "\104\0\1\322\65\0\1\323\65\0\1\324\73\0\1\325"+
    "\62\0\1\326\63\0\1\327\4\0\1\330\55\0\1\331"+
    "\74\0\1\332\57\0\1\333\72\0\1\334\70\0\1\335"+
    "\75\0\1\336\57\0\1\337\106\0\1\340\67\0\1\341"+
    "\67\0\1\342\46\0\1\343\67\0\1\344\77\0\1\345"+
    "\57\0\1\346\104\0\1\347\71\0\1\350\54\0\1\351"+
    "\104\0\1\352\60\0\1\353\61\0\1\354\67\0\1\355"+
    "\75\0\1\356\65\0\1\357\74\0\1\360\64\0\1\361"+
    "\71\0\1\362\63\0\1\363\73\0\1\364\67\0\1\365"+
    "\102\0\1\366\61\0\1\367\52\0\1\370\102\0\1\371"+
    "\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9072];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\1\1\6\11\2\1\1\11"+
    "\3\1\1\11\1\1\2\11\1\1\4\11\23\1\20\11"+
    "\1\0\1\1\3\0\1\1\6\0\1\11\1\1\14\0"+
    "\1\11\1\0\1\11\5\0\1\11\6\0\5\11\7\0"+
    "\1\11\3\0\1\11\1\1\5\0\4\11\3\0\1\1"+
    "\1\0\1\11\4\0\2\11\3\0\1\11\1\0\1\11"+
    "\10\0\1\11\1\0\1\11\7\0\3\11\6\0\1\11"+
    "\2\0\3\11\1\0\1\11\1\0\1\11\1\0\2\11"+
    "\4\0\1\11\4\0\1\11\10\0\2\11\1\0\1\11"+
    "\7\0\2\11\1\0\2\11\1\0\1\11\5\0\3\11"+
    "\1\0\3\11\2\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _OCamlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _OCamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 106: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 107: break;
          case 3:
            { return EXCLAMATION_MARK;
            }
          // fall through
          case 108: break;
          case 4:
            { return SHARP;
            }
          // fall through
          case 109: break;
          case 5:
            { return DOLLAR;
            }
          // fall through
          case 110: break;
          case 6:
            { return PERCENT;
            }
          // fall through
          case 111: break;
          case 7:
            { return AMPERSAND;
            }
          // fall through
          case 112: break;
          case 8:
            { return SINGLE_QUOTE;
            }
          // fall through
          case 113: break;
          case 9:
            { return LPAREN;
            }
          // fall through
          case 114: break;
          case 10:
            { return RPAREN;
            }
          // fall through
          case 115: break;
          case 11:
            { return STAR;
            }
          // fall through
          case 116: break;
          case 12:
            { return PLUS;
            }
          // fall through
          case 117: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 118: break;
          case 14:
            { return MINUS;
            }
          // fall through
          case 119: break;
          case 15:
            { return DOT;
            }
          // fall through
          case 120: break;
          case 16:
            { return SLASH;
            }
          // fall through
          case 121: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 122: break;
          case 18:
            { return SEMI;
            }
          // fall through
          case 123: break;
          case 19:
            { return LT;
            }
          // fall through
          case 124: break;
          case 20:
            { return EQ;
            }
          // fall through
          case 125: break;
          case 21:
            { return GT;
            }
          // fall through
          case 126: break;
          case 22:
            { return QUESTION_MARK;
            }
          // fall through
          case 127: break;
          case 23:
            { return ARROBASE;
            }
          // fall through
          case 128: break;
          case 24:
            { return LBRACKET;
            }
          // fall through
          case 129: break;
          case 25:
            { return RBRACKET;
            }
          // fall through
          case 130: break;
          case 26:
            { return CARRET;
            }
          // fall through
          case 131: break;
          case 27:
            { return UNDERSCORE;
            }
          // fall through
          case 132: break;
          case 28:
            { return BACKTICK;
            }
          // fall through
          case 133: break;
          case 29:
            { return LBRACE;
            }
          // fall through
          case 134: break;
          case 30:
            { return PIPE;
            }
          // fall through
          case 135: break;
          case 31:
            { return RBRACE;
            }
          // fall through
          case 136: break;
          case 32:
            { return TILDE;
            }
          // fall through
          case 137: break;
          case 33:
            { return NOT_EQ;
            }
          // fall through
          case 138: break;
          case 34:
            { return L_AND;
            }
          // fall through
          case 139: break;
          case 35:
            { return MINUSDOT;
            }
          // fall through
          case 140: break;
          case 36:
            { return RIGHT_ARROW;
            }
          // fall through
          case 141: break;
          case 37:
            { return DOTDOT;
            }
          // fall through
          case 142: break;
          case 38:
            { return SHORTCUT;
            }
          // fall through
          case 143: break;
          case 39:
            { return COLON_EQ;
            }
          // fall through
          case 144: break;
          case 40:
            { return COLON_GT;
            }
          // fall through
          case 145: break;
          case 41:
            { return SEMISEMI;
            }
          // fall through
          case 146: break;
          case 42:
            { return LEFT_ARROW;
            }
          // fall through
          case 147: break;
          case 43:
            { return GREATERRBRACE;
            }
          // fall through
          case 148: break;
          case 44:
            { return LBRACKETLESS;
            }
          // fall through
          case 149: break;
          case 45:
            { return LBRACKETGREATER;
            }
          // fall through
          case 150: break;
          case 46:
            { return LARRAY;
            }
          // fall through
          case 151: break;
          case 47:
            { return AS;
            }
          // fall through
          case 152: break;
          case 48:
            { return DO;
            }
          // fall through
          case 153: break;
          case 49:
            { return IF;
            }
          // fall through
          case 154: break;
          case 50:
            { return IN;
            }
          // fall through
          case 155: break;
          case 51:
            { return OF;
            }
          // fall through
          case 156: break;
          case 52:
            { return OR;
            }
          // fall through
          case 157: break;
          case 53:
            { return TO;
            }
          // fall through
          case 158: break;
          case 54:
            { return LBRACELESS;
            }
          // fall through
          case 159: break;
          case 55:
            { return RARRAY;
            }
          // fall through
          case 160: break;
          case 56:
            { return L_OR;
            }
          // fall through
          case 161: break;
          case 57:
            { return AND;
            }
          // fall through
          case 162: break;
          case 58:
            { return ASR;
            }
          // fall through
          case 163: break;
          case 59:
            { return END;
            }
          // fall through
          case 164: break;
          case 60:
            { return FOR;
            }
          // fall through
          case 165: break;
          case 61:
            { return FUN;
            }
          // fall through
          case 166: break;
          case 62:
            { return LET;
            }
          // fall through
          case 167: break;
          case 63:
            { return LOR;
            }
          // fall through
          case 168: break;
          case 64:
            { return LSL;
            }
          // fall through
          case 169: break;
          case 65:
            { return LSR;
            }
          // fall through
          case 170: break;
          case 66:
            { return MOD;
            }
          // fall through
          case 171: break;
          case 67:
            { return NEW;
            }
          // fall through
          case 172: break;
          case 68:
            { return REC;
            }
          // fall through
          case 173: break;
          case 69:
            { return SIG;
            }
          // fall through
          case 174: break;
          case 70:
            { return TRY;
            }
          // fall through
          case 175: break;
          case 71:
            { return VAL;
            }
          // fall through
          case 176: break;
          case 72:
            { return DONE;
            }
          // fall through
          case 177: break;
          case 73:
            { return ELSE;
            }
          // fall through
          case 178: break;
          case 74:
            { return LAND;
            }
          // fall through
          case 179: break;
          case 75:
            { return LAZY;
            }
          // fall through
          case 180: break;
          case 76:
            { return LXOR;
            }
          // fall through
          case 181: break;
          case 77:
            { return OPEN;
            }
          // fall through
          case 182: break;
          case 78:
            { return THEN;
            }
          // fall through
          case 183: break;
          case 79:
            { return TRUE;
            }
          // fall through
          case 184: break;
          case 80:
            { return TYPE;
            }
          // fall through
          case 185: break;
          case 81:
            { return WHEN;
            }
          // fall through
          case 186: break;
          case 82:
            { return WITH;
            }
          // fall through
          case 187: break;
          case 83:
            { return BEGIN;
            }
          // fall through
          case 188: break;
          case 84:
            { return CLASS;
            }
          // fall through
          case 189: break;
          case 85:
            { return FALSE;
            }
          // fall through
          case 190: break;
          case 86:
            { return MATCH;
            }
          // fall through
          case 191: break;
          case 87:
            { return WHILE;
            }
          // fall through
          case 192: break;
          case 88:
            { return ASSERT;
            }
          // fall through
          case 193: break;
          case 89:
            { return DOWNTO;
            }
          // fall through
          case 194: break;
          case 90:
            { return METHOD;
            }
          // fall through
          case 195: break;
          case 91:
            { return MODULE;
            }
          // fall through
          case 196: break;
          case 92:
            { return NONREC;
            }
          // fall through
          case 197: break;
          case 93:
            { return OBJECT;
            }
          // fall through
          case 198: break;
          case 94:
            { return STRUCT;
            }
          // fall through
          case 199: break;
          case 95:
            { return FUNCTOR;
            }
          // fall through
          case 200: break;
          case 96:
            { return INCLUDE;
            }
          // fall through
          case 201: break;
          case 97:
            { return INHERIT;
            }
          // fall through
          case 202: break;
          case 98:
            { return MUTABLE;
            }
          // fall through
          case 203: break;
          case 99:
            { return PRIVATE;
            }
          // fall through
          case 204: break;
          case 100:
            { return VIRTUAL;
            }
          // fall through
          case 205: break;
          case 101:
            { return EXTERNAL;
            }
          // fall through
          case 206: break;
          case 102:
            { return FUNCTION;
            }
          // fall through
          case 207: break;
          case 103:
            { return EXCEPTION;
            }
          // fall through
          case 208: break;
          case 104:
            { return CONSTRAINT;
            }
          // fall through
          case 209: break;
          case 105:
            { return INITIALIZER;
            }
          // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
