// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _OCamlLexer.flex

package com.ocaml.language.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.ERROR_ELEMENT;
import static com.ocaml.language.psi.OCamlTypes.*;


public class _OCamlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int INITIAL = 4;
  public static final int IN_STRING = 6;
  public static final int IN_QUOTED_STRING = 8;
  public static final int IN_OCAML_ML_COMMENT = 10;
  public static final int IN_OCAML_DOC_COMMENT = 12;
  public static final int IN_OCAML_ANNOT = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  1,  1,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\4\27\2\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\40\1\42\1\40\10\43"+
    "\1\44\1\45\7\43\1\46\2\43\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\67\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\6\0\1\3\32\0\1\1\u01df\0\1\1\177\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0\u0100\112";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\22\41\1\42\1\43\1\44\1\45\1\46\1\2"+
    "\1\47\1\2\1\50\3\47\1\51\2\47\1\52\1\53"+
    "\2\0\1\54\1\55\1\56\1\57\4\0\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\41\1\72\3\41\1\73\6\41\1\74\1\75\14\41"+
    "\1\76\1\41\1\77\5\41\1\100\6\41\1\101\1\102"+
    "\1\103\1\0\1\47\5\0\1\104\1\105\1\106\1\107"+
    "\1\110\2\111\5\0\1\112\3\23\1\113\1\114\7\41"+
    "\1\115\3\41\1\116\1\117\5\41\1\120\1\121\1\122"+
    "\1\123\3\41\1\124\1\41\1\125\4\41\1\126\1\127"+
    "\3\41\1\130\1\41\1\131\4\41\12\0\1\132\1\0"+
    "\1\23\4\41\1\133\1\41\1\134\7\41\1\135\1\136"+
    "\1\137\6\41\1\140\2\41\1\141\1\142\1\143\1\41"+
    "\1\144\1\41\1\145\11\0\1\23\1\41\1\146\1\147"+
    "\4\41\1\150\4\41\1\151\10\41\1\152\3\0\2\112"+
    "\1\153\1\41\1\154\7\41\1\155\1\156\1\41\1\157"+
    "\1\160\1\41\1\161\1\41\2\0\4\41\1\162\1\163"+
    "\1\164\1\41\1\165\1\166\1\167\2\0\2\41\1\170"+
    "\1\171\1\41\1\47\1\0\1\41\1\172\1\41\1\0"+
    "\1\112\1\173\1\41\1\0\1\174";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u020d\0\u0258\0\u02a3\0\u020d\0\u020d\0\u020d\0\u020d\0\u02ee"+
    "\0\u0339\0\u0384\0\u020d\0\u020d\0\u020d\0\u020d\0\u03cf\0\u041a"+
    "\0\u020d\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u020d\0\u05dc"+
    "\0\u020d\0\u020d\0\u0627\0\u0672\0\u020d\0\u020d\0\u06bd\0\u020d"+
    "\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u06bd\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u020d\0\u020d\0\u020d\0\u0c99"+
    "\0\u020d\0\u0ce4\0\u020d\0\u0d2f\0\u0d7a\0\u0dc5\0\u020d\0\u0e10"+
    "\0\u0e5b\0\u020d\0\u020d\0\u0ea6\0\u0ef1\0\u0f3c\0\u020d\0\u020d"+
    "\0\u020d\0\u0f87\0\u0fd2\0\u101d\0\u1068\0\u020d\0\u020d\0\u020d"+
    "\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d\0\u10b3"+
    "\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u06bd\0\u1437\0\u1482\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770"+
    "\0\u17bb\0\u06bd\0\u1806\0\u06bd\0\u1851\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u06bd\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f"+
    "\0\u020d\0\u020d\0\u020d\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6"+
    "\0\u1d01\0\u0ce4\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d\0\u020d"+
    "\0\u0ea6\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e"+
    "\0\u1f59\0\u1fa4\0\u06bd\0\u06bd\0\u1fef\0\u203a\0\u2085\0\u20d0"+
    "\0\u211b\0\u2166\0\u21b1\0\u06bd\0\u21fc\0\u2247\0\u2292\0\u06bd"+
    "\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u06bd\0\u06bd"+
    "\0\u06bd\0\u06bd\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u06bd"+
    "\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u06bd\0\u06bd\0\u2742\0\u278d"+
    "\0\u27d8\0\u06bd\0\u2823\0\u06bd\0\u286e\0\u28b9\0\u2904\0\u294f"+
    "\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u020d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4"+
    "\0\u2dff\0\u06bd\0\u2e4a\0\u06bd\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76"+
    "\0\u2fc1\0\u300c\0\u3057\0\u06bd\0\u06bd\0\u06bd\0\u30a2\0\u30ed"+
    "\0\u3138\0\u3183\0\u31ce\0\u3219\0\u06bd\0\u3264\0\u32af\0\u06bd"+
    "\0\u06bd\0\u06bd\0\u32fa\0\u06bd\0\u3345\0\u06bd\0\u3390\0\u33db"+
    "\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633"+
    "\0\u367e\0\u06bd\0\u06bd\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u06bd"+
    "\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u06bd\0\u3921\0\u396c\0\u39b7"+
    "\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u06bd\0\u3b79\0\u3bc4"+
    "\0\u3c0f\0\u3c5a\0\u3ca5\0\u06bd\0\u3cf0\0\u06bd\0\u3d3b\0\u3d86"+
    "\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u06bd\0\u06bd\0\u3f48"+
    "\0\u06bd\0\u06bd\0\u3f93\0\u06bd\0\u3fde\0\u4029\0\u4074\0\u40bf"+
    "\0\u410a\0\u4155\0\u41a0\0\u06bd\0\u06bd\0\u06bd\0\u41eb\0\u06bd"+
    "\0\u06bd\0\u06bd\0\u4236\0\u4281\0\u42cc\0\u4317\0\u06bd\0\u06bd"+
    "\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u06bd\0\u448e\0\u44d9\0\u020d"+
    "\0\u06bd\0\u4524\0\u456f\0\u06bd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\113\10\114\11\4\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\4\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\7\43\1\44\1\11\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\2\57\1\60\2\57\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\57\1\71\1\72\3\57\1\73"+
    "\1\74\1\75\1\76\7\11\1\77\41\11\1\100\42\11"+
    "\3\101\1\11\1\102\1\101\1\103\5\101\1\104\1\101"+
    "\1\105\73\101\1\11\3\101\1\11\1\102\1\101\1\103"+
    "\5\101\1\104\1\101\1\106\73\101\1\11\3\101\1\11"+
    "\1\102\44\101\1\107\34\101\1\110\1\111\2\101\1\11"+
    "\114\0\4\12\142\0\1\112\70\0\1\113\100\0\2\114"+
    "\3\0\43\114\1\115\41\114\17\0\1\116\116\0\1\117"+
    "\12\0\1\120\77\0\1\121\112\0\1\122\1\0\5\33"+
    "\10\0\1\123\2\0\1\124\1\0\1\125\4\0\1\33"+
    "\2\0\1\123\14\0\1\124\7\0\1\125\31\0\1\122"+
    "\1\0\5\33\22\0\1\33\70\0\1\126\2\0\1\127"+
    "\1\130\107\0\1\131\101\0\1\132\201\0\1\133\15\0"+
    "\1\43\10\0\5\43\7\0\7\43\4\0\1\43\1\0"+
    "\31\43\40\0\1\134\1\0\1\135\1\0\1\136\47\0"+
    "\1\137\16\0\1\57\10\0\5\57\7\0\7\57\4\0"+
    "\1\57\1\0\31\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\15\57\1\140\3\57\1\141"+
    "\7\57\20\0\1\57\10\0\5\57\7\0\7\57\4\0"+
    "\1\57\1\0\4\57\1\142\24\57\20\0\1\57\10\0"+
    "\5\57\7\0\7\57\4\0\1\57\1\0\13\57\1\143"+
    "\2\57\1\144\12\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\16\57\1\145\12\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\13\57\1\146\1\57\1\147\10\57\1\150\2\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\1\151\15\57\1\152\4\57\1\153\5\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\5\57"+
    "\1\154\7\57\1\155\13\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\1\156\3\57\1\157"+
    "\11\57\1\160\2\57\1\161\4\57\1\162\2\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\1\163\3\57\1\164\11\57\1\165\4\57\1\166\5\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\4\57\1\167\11\57\1\170\12\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\1\57"+
    "\1\171\3\57\1\172\11\57\1\173\1\174\10\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\20\57\1\175\10\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\4\57\1\176\24\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\10\57\1\177\11\57\1\200\6\57\20\0\1\57\10\0"+
    "\5\57\7\0\7\57\4\0\1\57\1\0\7\57\1\201"+
    "\6\57\1\202\1\57\1\203\6\57\1\204\1\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\1\205\7\57\1\206\20\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\7\57\1\207\1\210"+
    "\20\57\40\0\1\211\130\0\1\212\35\0\1\213\11\0"+
    "\1\101\4\0\1\101\10\0\5\214\17\0\1\101\5\0"+
    "\1\101\13\0\1\215\1\216\1\0\1\101\1\217\1\101"+
    "\1\220\2\0\1\221\11\0\1\101\1\0\1\222\124\0"+
    "\1\223\111\0\1\224\112\0\1\225\204\0\1\226\113\0"+
    "\1\227\15\0\1\230\105\0\1\114\4\0\1\231\10\0"+
    "\5\232\17\0\1\114\5\0\1\114\13\0\1\114\1\233"+
    "\1\0\1\114\1\234\1\114\3\0\1\235\25\0\1\236"+
    "\120\0\5\237\22\0\1\237\63\0\2\240\111\0\4\241"+
    "\107\0\5\242\7\0\3\242\12\0\6\242\43\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\3\57"+
    "\1\243\25\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\20\57\1\244\1\245\7\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\6\57\1\246\22\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\1\247\30\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\15\57"+
    "\1\250\13\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\15\57\1\251\7\57\1\252\3\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\21\57\1\253\7\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\3\57\1\254\25\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\2\57\1\255\17\57\1\256\6\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\13\57"+
    "\1\257\15\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\20\57\1\260\10\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\15\57"+
    "\1\261\13\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\2\57\1\262\4\57\1\263\1\264"+
    "\20\57\20\0\1\57\10\0\5\57\7\0\7\57\4\0"+
    "\1\57\1\0\15\57\1\265\12\57\1\266\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\22\57"+
    "\1\267\6\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\20\57\1\270\10\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\13\57"+
    "\1\271\4\57\1\272\10\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\16\57\1\273\12\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\22\57\1\274\6\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\22\57\1\275\6\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\3\57\1\276\25\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\22\57\1\277\6\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\25\57\1\300\3\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\15\57\1\301\13\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\11\57\1\302\17\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\4\57\1\303\24\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\10\57\1\304\20\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\2\57\1\305\26\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\6\57\1\306\22\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\20\57\1\307\10\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\4\57\1\310\24\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\23\57\1\311\3\57"+
    "\1\312\1\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\17\57\1\313\11\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\13\57"+
    "\1\314\15\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\20\57\1\315\10\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\4\57"+
    "\1\316\3\57\1\317\20\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\22\57\1\320\6\57"+
    "\31\0\5\321\143\0\1\322\55\0\3\323\160\0\1\324"+
    "\124\0\1\325\30\0\5\326\7\0\3\326\12\0\6\326"+
    "\54\0\5\327\106\0\3\330\160\0\1\331\42\0\5\332"+
    "\7\0\3\332\12\0\6\332\30\0\15\333\2\0\74\333"+
    "\42\0\1\334\16\0\1\334\55\0\2\240\25\0\1\240"+
    "\63\0\4\241\23\0\1\241\63\0\5\335\7\0\3\335"+
    "\10\0\1\335\1\0\6\335\43\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\4\57\1\336\24\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\10\57\1\337\20\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\21\57\1\340\7\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\21\57\1\341\7\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\4\57\1\342\24\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\15\57\1\343\13\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\4\57\1\344\24\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\4\57\1\345\24\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\4\57\1\346\24\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\21\57\1\347\7\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\2\57\1\350\26\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\13\57\1\351\15\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\4\57\1\352\24\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\22\57\1\353\6\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\3\57\1\354\25\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\27\57\1\355\1\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\20\57\1\356\10\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\2\57\1\357\26\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\7\57\1\360\21\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\23\57\1\361\5\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\1\362\30\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\20\57\1\363\10\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\4\57\1\364\24\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\15\57\1\365\13\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\24\57\1\366\4\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\23\57\1\367\5\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\15\57\1\370\13\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\4\57\1\371\24\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\4\57\1\372\24\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\22\57\1\373\6\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\15\57\1\374\13\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\13\57\1\375\15\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\7\57\1\376\21\57\31\0"+
    "\5\101\164\0\1\377\34\0\4\u0100\140\0\1\u0101\61\0"+
    "\5\325\7\0\3\325\12\0\6\325\25\0\1\101\26\0"+
    "\5\u0102\7\0\3\u0102\12\0\6\u0102\54\0\5\114\106\0"+
    "\4\u0103\140\0\1\u0104\61\0\5\u0105\7\0\3\u0105\12\0"+
    "\6\u0105\47\0\1\u0106\1\0\1\u0106\113\0\1\u0107\1\0"+
    "\5\u0108\7\0\3\u0108\10\0\1\u0108\1\0\6\u0108\43\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\20\57\1\u0109\10\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\15\57\1\u010a\13\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\21\57\1\u010b\7\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\22\57\1\u010c\6\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\22\57\1\u010d\6\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\17\57\1\u010e\11\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\20\57\1\u010f\10\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\4\57\1\u0110\24\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\22\57\1\u0111\6\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\23\57\1\u0112\5\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\20\57\1\u0113\10\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\10\57\1\u0114\20\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\7\57\1\u0115\21\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\16\57\1\u0116\12\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\13\57\1\u0117\15\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\1\57\1\u0118\27\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\4\57\1\u0119\24\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\2\57\1\u011a\26\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\1\u011b\30\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\2\57\1\u011c\26\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\23\57"+
    "\1\u011d\5\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\4\57\1\u011e\24\57\75\0\1\u011f"+
    "\46\0\4\101\142\0\1\u0120\57\0\5\101\7\0\3\101"+
    "\12\0\6\101\54\0\4\114\142\0\1\u0121\57\0\5\114"+
    "\7\0\3\114\12\0\6\114\54\0\5\u0122\106\0\5\u0123"+
    "\7\0\3\u0123\10\0\1\u0123\1\0\6\u0123\54\0\5\u0108"+
    "\7\0\3\u0108\10\0\1\u0108\1\0\6\u0108\43\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\22\57"+
    "\1\u0124\6\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\20\57\1\u0125\10\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\16\57"+
    "\1\u0126\12\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\22\57\1\u0127\6\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\15\57"+
    "\1\u0128\13\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\10\57\1\u0129\5\57\1\u012a\12\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\3\57\1\u012b\25\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\10\57\1\u012c\20\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\1\u012d\30\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\3\57\1\u012e\25\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\4\57\1\u012f\24\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\13\57\1\u0130\15\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\2\57\1\u0131\26\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\22\57\1\u0132\6\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\22\57\1\u0133\6\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\22\57\1\u0134\6\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\1\u0135\30\57\72\0\1\u0136\106\0\1\101\112\0\1\114"+
    "\55\0\5\u0122\22\0\1\u0122\104\0\1\u0137\26\0\1\u0137"+
    "\31\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\1\u0138\30\57\20\0\1\57\10\0\5\57\7\0"+
    "\7\57\4\0\1\57\1\0\10\57\1\u0139\20\57\20\0"+
    "\1\57\10\0\5\57\7\0\7\57\4\0\1\57\1\0"+
    "\1\u013a\30\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\16\57\1\u013b\12\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\20\57"+
    "\1\u013c\10\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\4\57\1\u013d\24\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\22\57"+
    "\1\u013e\6\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\13\57\1\u013f\15\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\4\57"+
    "\1\u0140\24\57\20\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\4\57\1\u0141\24\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\13\57"+
    "\1\u0142\15\57\77\0\1\u0143\37\0\1\u0144\1\0\1\u0144"+
    "\104\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\10\57\1\u0145\20\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\16\57\1\u0146\12\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\13\57\1\u0147\15\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\15\57\1\u0148\13\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\10\57\1\u0149\20\57\66\0\1\u014a\55\0\5\u014b"+
    "\75\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\15\57\1\u014c\13\57\20\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\15\57\1\u014d\13\57"+
    "\20\0\1\57\10\0\5\57\7\0\7\57\4\0\1\57"+
    "\1\0\30\57\1\u014e\103\0\1\217\1\u014f\37\0\5\u0150"+
    "\22\0\1\u0150\52\0\1\57\10\0\5\57\7\0\7\57"+
    "\4\0\1\57\1\0\22\57\1\u0151\6\57\20\0\1\57"+
    "\10\0\5\57\7\0\7\57\4\0\1\57\1\0\4\57"+
    "\1\u0152\24\57\62\0\1\u0153\50\0\1\57\10\0\5\57"+
    "\7\0\7\57\4\0\1\57\1\0\20\57\1\u0154\10\57"+
    "\63\0\1\101\34\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17850];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\2\1\4\11\3\1\4\11\2\1\1\11"+
    "\5\1\1\11\1\1\2\11\2\1\2\11\1\1\1\11"+
    "\24\1\3\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\2\11\2\0\1\1\3\11\4\0\12\11\51\1"+
    "\3\11\1\0\1\1\5\0\6\11\1\1\5\0\62\1"+
    "\12\0\1\11\1\0\42\1\11\0\27\1\3\0\24\1"+
    "\2\0\13\1\2\0\6\1\1\0\3\1\1\0\1\11"+
    "\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private int tokenStartIndex;
  private CharSequence quotedStringId;
  private int commentDepth;
  private boolean inCommentString = false;
  private boolean inAnnotationDetails = false;

  //Store the start index of a token
  private void tokenStart() {
    tokenStartIndex = zzStartRead;
  }

  //Set the start index of the token to the stored index
  private void tokenEnd() {
    zzStartRead = tokenStartIndex;
  }

  public _OCamlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _OCamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return STRING_VALUE;
            }  // fall though
            case 341: break;
            case IN_OCAML_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return ERROR_ELEMENT;
            }  // fall though
            case 342: break;
            case IN_OCAML_DOC_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return DOC_COMMENT;
            }  // fall though
            case 343: break;
            case IN_OCAML_ANNOT: {
              yybegin(INITIAL); tokenEnd(); return ANNOTATION;
            }  // fall though
            case 344: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(INITIAL); yypushback(1);
            }
          // fall through
          case 125: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 126: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 127: break;
          case 4:
            { return EXCLAMATION_MARK;
            }
          // fall through
          case 128: break;
          case 5:
            { yybegin(IN_STRING); tokenStart();
            }
          // fall through
          case 129: break;
          case 6:
            { return SHARP;
            }
          // fall through
          case 130: break;
          case 7:
            { return DOLLAR;
            }
          // fall through
          case 131: break;
          case 8:
            { return PERCENT;
            }
          // fall through
          case 132: break;
          case 9:
            { return AMPERSAND;
            }
          // fall through
          case 133: break;
          case 10:
            { return SINGLE_QUOTE;
            }
          // fall through
          case 134: break;
          case 11:
            { return LPAREN;
            }
          // fall through
          case 135: break;
          case 12:
            { return RPAREN;
            }
          // fall through
          case 136: break;
          case 13:
            { return STAR;
            }
          // fall through
          case 137: break;
          case 14:
            { return PLUS;
            }
          // fall through
          case 138: break;
          case 15:
            { return COMMA;
            }
          // fall through
          case 139: break;
          case 16:
            { return MINUS;
            }
          // fall through
          case 140: break;
          case 17:
            { return DOT;
            }
          // fall through
          case 141: break;
          case 18:
            { return SLASH;
            }
          // fall through
          case 142: break;
          case 19:
            { return INTEGER_VALUE;
            }
          // fall through
          case 143: break;
          case 20:
            { return COLON;
            }
          // fall through
          case 144: break;
          case 21:
            { return SEMI;
            }
          // fall through
          case 145: break;
          case 22:
            { return LT;
            }
          // fall through
          case 146: break;
          case 23:
            { return EQ;
            }
          // fall through
          case 147: break;
          case 24:
            { return GT;
            }
          // fall through
          case 148: break;
          case 25:
            { return QUESTION_MARK;
            }
          // fall through
          case 149: break;
          case 26:
            { return ARROBASE;
            }
          // fall through
          case 150: break;
          case 27:
            { return CAPITALIZED_IDENT;
            }
          // fall through
          case 151: break;
          case 28:
            { return LBRACKET;
            }
          // fall through
          case 152: break;
          case 29:
            { return RBRACKET;
            }
          // fall through
          case 153: break;
          case 30:
            { return CARRET;
            }
          // fall through
          case 154: break;
          case 31:
            { return UNDERSCORE;
            }
          // fall through
          case 155: break;
          case 32:
            { return BACKTICK;
            }
          // fall through
          case 156: break;
          case 33:
            { return LOWERCASE_IDENT;
            }
          // fall through
          case 157: break;
          case 34:
            { return LBRACE;
            }
          // fall through
          case 158: break;
          case 35:
            { return PIPE;
            }
          // fall through
          case 159: break;
          case 36:
            { return RBRACE;
            }
          // fall through
          case 160: break;
          case 37:
            { return TILDE;
            }
          // fall through
          case 161: break;
          case 38:
            { yybegin(INITIAL); tokenEnd(); return STRING_VALUE;
            }
          // fall through
          case 162: break;
          case 39:
            { 
            }
          // fall through
          case 163: break;
          case 40:
            { inCommentString = !inCommentString;
            }
          // fall through
          case 164: break;
          case 41:
            { if (!inAnnotationDetails) { yybegin(INITIAL); tokenEnd(); return ANNOTATION; }
            }
          // fall through
          case 165: break;
          case 42:
            { return NOT_EQ;
            }
          // fall through
          case 166: break;
          case 43:
            { return L_AND;
            }
          // fall through
          case 167: break;
          case 44:
            { yybegin(IN_OCAML_ML_COMMENT); inCommentString = false; commentDepth = 1; tokenStart();
            }
          // fall through
          case 168: break;
          case 45:
            { return MINUSDOT;
            }
          // fall through
          case 169: break;
          case 46:
            { return RIGHT_ARROW;
            }
          // fall through
          case 170: break;
          case 47:
            { return DOTDOT;
            }
          // fall through
          case 171: break;
          case 48:
            { return SHORTCUT;
            }
          // fall through
          case 172: break;
          case 49:
            { return COLON_EQ;
            }
          // fall through
          case 173: break;
          case 50:
            { return COLON_GT;
            }
          // fall through
          case 174: break;
          case 51:
            { return SEMISEMI;
            }
          // fall through
          case 175: break;
          case 52:
            { return LEFT_ARROW;
            }
          // fall through
          case 176: break;
          case 53:
            { return GREATERRBRACE;
            }
          // fall through
          case 177: break;
          case 54:
            { return LBRACKETLESS;
            }
          // fall through
          case 178: break;
          case 55:
            { return LBRACKETGREATER;
            }
          // fall through
          case 179: break;
          case 56:
            { yybegin(IN_OCAML_ANNOT); inAnnotationDetails = false; tokenStart();
            }
          // fall through
          case 180: break;
          case 57:
            { return LARRAY;
            }
          // fall through
          case 181: break;
          case 58:
            { return AS;
            }
          // fall through
          case 182: break;
          case 59:
            { return DO;
            }
          // fall through
          case 183: break;
          case 60:
            { return IF;
            }
          // fall through
          case 184: break;
          case 61:
            { return IN;
            }
          // fall through
          case 185: break;
          case 62:
            { return OF;
            }
          // fall through
          case 186: break;
          case 63:
            { return OR;
            }
          // fall through
          case 187: break;
          case 64:
            { return TO;
            }
          // fall through
          case 188: break;
          case 65:
            { return LBRACELESS;
            }
          // fall through
          case 189: break;
          case 66:
            { return RARRAY;
            }
          // fall through
          case 190: break;
          case 67:
            { return L_OR;
            }
          // fall through
          case 191: break;
          case 68:
            { if (!inCommentString) commentDepth += 1;
            }
          // fall through
          case 192: break;
          case 69:
            { if (!inCommentString) { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return COMMENT; } }
            }
          // fall through
          case 193: break;
          case 70:
            { if (!inCommentString) { commentDepth -= 1; if (commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return DOC_COMMENT; } }
            }
          // fall through
          case 194: break;
          case 71:
            { inAnnotationDetails = true;
            }
          // fall through
          case 195: break;
          case 72:
            { inAnnotationDetails = false;
            }
          // fall through
          case 196: break;
          case 73:
            { return CHAR_VALUE;
            }
          // fall through
          case 197: break;
          case 74:
            { return FLOAT_VALUE;
            }
          // fall through
          case 198: break;
          case 75:
            { return AND;
            }
          // fall through
          case 199: break;
          case 76:
            { return ASR;
            }
          // fall through
          case 200: break;
          case 77:
            { return END;
            }
          // fall through
          case 201: break;
          case 78:
            { return FOR;
            }
          // fall through
          case 202: break;
          case 79:
            { return FUN;
            }
          // fall through
          case 203: break;
          case 80:
            { return LET;
            }
          // fall through
          case 204: break;
          case 81:
            { return LOR;
            }
          // fall through
          case 205: break;
          case 82:
            { return LSL;
            }
          // fall through
          case 206: break;
          case 83:
            { return LSR;
            }
          // fall through
          case 207: break;
          case 84:
            { return MOD;
            }
          // fall through
          case 208: break;
          case 85:
            { return NEW;
            }
          // fall through
          case 209: break;
          case 86:
            { return REC;
            }
          // fall through
          case 210: break;
          case 87:
            { return SIG;
            }
          // fall through
          case 211: break;
          case 88:
            { return TRY;
            }
          // fall through
          case 212: break;
          case 89:
            { return VAL;
            }
          // fall through
          case 213: break;
          case 90:
            { yybegin(IN_OCAML_DOC_COMMENT); inCommentString = false; commentDepth = 1; tokenStart();
            }
          // fall through
          case 214: break;
          case 91:
            { return DONE;
            }
          // fall through
          case 215: break;
          case 92:
            { return ELSE;
            }
          // fall through
          case 216: break;
          case 93:
            { return LAND;
            }
          // fall through
          case 217: break;
          case 94:
            { return LAZY;
            }
          // fall through
          case 218: break;
          case 95:
            { return LXOR;
            }
          // fall through
          case 219: break;
          case 96:
            { return OPEN;
            }
          // fall through
          case 220: break;
          case 97:
            { return THEN;
            }
          // fall through
          case 221: break;
          case 98:
            { return TRUE;
            }
          // fall through
          case 222: break;
          case 99:
            { return TYPE;
            }
          // fall through
          case 223: break;
          case 100:
            { return WHEN;
            }
          // fall through
          case 224: break;
          case 101:
            { return WITH;
            }
          // fall through
          case 225: break;
          case 102:
            { return BEGIN;
            }
          // fall through
          case 226: break;
          case 103:
            { return CLASS;
            }
          // fall through
          case 227: break;
          case 104:
            { return FALSE;
            }
          // fall through
          case 228: break;
          case 105:
            { return MATCH;
            }
          // fall through
          case 229: break;
          case 106:
            { return WHILE;
            }
          // fall through
          case 230: break;
          case 107:
            { return ASSERT;
            }
          // fall through
          case 231: break;
          case 108:
            { return DOWNTO;
            }
          // fall through
          case 232: break;
          case 109:
            { return METHOD;
            }
          // fall through
          case 233: break;
          case 110:
            { return MODULE;
            }
          // fall through
          case 234: break;
          case 111:
            { return NONREC;
            }
          // fall through
          case 235: break;
          case 112:
            { return OBJECT;
            }
          // fall through
          case 236: break;
          case 113:
            { return STRUCT;
            }
          // fall through
          case 237: break;
          case 114:
            { return FUNCTOR;
            }
          // fall through
          case 238: break;
          case 115:
            { return INCLUDE;
            }
          // fall through
          case 239: break;
          case 116:
            { return INHERIT;
            }
          // fall through
          case 240: break;
          case 117:
            { return MUTABLE;
            }
          // fall through
          case 241: break;
          case 118:
            { return PRIVATE;
            }
          // fall through
          case 242: break;
          case 119:
            { return VIRTUAL;
            }
          // fall through
          case 243: break;
          case 120:
            { return EXTERNAL;
            }
          // fall through
          case 244: break;
          case 121:
            { return FUNCTION;
            }
          // fall through
          case 245: break;
          case 122:
            { return EXCEPTION;
            }
          // fall through
          case 246: break;
          case 123:
            { return CONSTRAINT;
            }
          // fall through
          case 247: break;
          case 124:
            { return INITIALIZER;
            }
          // fall through
          case 248: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
