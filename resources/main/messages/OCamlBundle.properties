# keywords
project.up.first=Project
module.up.first=Module
# Project Wizard
project.wizard.title=OCaml {0}
project.wizard.instruction=If you have installed an OCaml using opam, \
  simply add an SDK pointing to the folder in which the ocaml is (ex: ~/.opam/4.05.0/). \
  This is the <b>recommended way</b>. \
  Otherwise, if you do not have opam, the second menu will help in creating an opam-like folder, \
  but some features won't be available.\
  <br><br> On Windows, it's recommended to install a WSL (ex: Windows Store > Debian), \
  and use it as you would on Linux (ex: install <code>opam</code>, \
  then use <code>opam switch create 4.12.0</code>). An alternative could be cygwin \
  (check opam/ocaml in the installer/updater).
project.wizard.use.existing=Use or create an opam SDK
project.wizard.create.simple=Create a new simple SDK
project.wizard.ocaml.binary=Ocaml binary
project.wizard.ocamlc.binary=Ocaml compiler binary
project.wizard.ocaml.version=Ocaml version
project.wizard.ocaml.sources=Sources
project.wizard.create.opam.warning=You should not use this with an SDK installed using opam. Use the other one.
project.wizard.create.location=The new SDK will be stored in {0}.
# Module
module.description=OCaml modules are used for developing <b>OCaml-based</b> applications.
module.name=OCaml Module
module.prompt.please.select.module.sdk=Please select the OCaml SDK to be set for this {0}
module.prompt.sdk={0} SDK:
# Sdk
sdk.path.binary.wsl.invalid=The ocaml distribution {0} is not valid.
sdk.ocaml.binary.invalid=The ocaml binary value must point to a path ending with `/bin/ocaml`
sdk.ocaml.sources.folder.invalid=The sources' folder must point to a path ending with `/lib/ocaml`
sdk.ocaml.binary.not.found=The ocaml binary could not be found.
sdk.ocaml.compiler.not.found=The ocaml compiler could not be found.
sdk.ocaml.sources.not.found=The ocaml sources' folder could not be found.
sdk.ocaml.version.empty=No OCaml version. Please, wait until we detect the version of ocaml.
sdk.create.failed=Could not create SDK. Check that we have access to {0}.