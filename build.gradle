plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.3.0'
    id 'org.jetbrains.grammarkit' version '2021.1.3'
    id 'net.saliman.properties' version '1.5.1'
    id 'org.gradle.test-retry' version '1.3.1'
}

// The same as `--stacktrace` param
gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'

repositories {
    mavenCentral()
}

configurations {
    all {
        // Allows using project dependencies instead of IDE dependencies
        // during compilation and test running
        resolutionStrategy.sortArtifacts(ResolutionStrategy.SortOrder.DEPENDENCY_FIRST)
    }
}

group = 'com.ocaml'
version = "$majorVersion.$minorVersion.$patchVersion-$platformVersion" as String

intellij {
    version = ideaVersion
    pluginName = "intellij-ocaml"
    plugins = [
            'java',
            'com.jetbrains.hackathon.indices.viewer:'+indicesVersion,
            'PsiViewer:'+psiViewerPluginVersion
    ]
    downloadSources = true
    sandboxDir = "$buildDir/idea-sandbox-$platformVersion"

    patchPluginXml {
        sinceBuild = pluginSinceBuild
        untilBuild = pluginUntilBuild
        changeNotes = """
                Add changes notes here.
            """.stripIndent()
    }
}

grammarKit {
    grammarKitRelease = '2021.1.2'
}

sourceCompatibility = '11.0'
compileJava.options.encoding = 'UTF-8'

// We are defining that the src/resources folders
// which are both a "main" folder inside resources/src/tests
// and a folder such as "212" or "213"
sourceSets {
    main.java.srcDirs = ["src/$platformVersion", "src/main"]
    main.resources.srcDirs = ["resources/main", "resources/$platformVersion"]
    test.java.srcDirs = ["test/$platformVersion/", "test/main"]
    test.resources.srcDirs = ["resources/main", "resources/$platformVersion"]
}

buildPlugin {
    // Set proper name for final plugin zip.
    // Otherwise, base name is the same as gradle module name
    archiveBaseName.set("intellij-ocaml")
}

runIde {
    systemProperty 'idea.is.internal', true

    // Default args for IDEA installation
    jvmArgs("-Xmx768m", "-XX:+UseConcMarkSweepGC", "-XX:SoftRefLRUPolicyMSPerMB=50")
    // Disable plugin auto reloading. See `com.intellij.ide.plugins.DynamicPluginVfsListener`
    jvmArgs("-Didea.auto.reload.plugins=false")
    // Don't show "Tip of the Day" at startup
    jvmArgs("-Dide.show.tips.on.startup.default.value=false")

    // Uncomment to enable localization testing mode
    // jvmArgs("-Didea.l10n=true")
}

// https://plugins.jetbrains.com/docs/intellij/api-changes-list.html
runPluginVerifier {
    ideVersions = [ideaVersion]
}